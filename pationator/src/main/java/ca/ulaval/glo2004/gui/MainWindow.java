package ca.ulaval.glo2004.gui;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import ca.ulaval.glo2004.domain.*;
import ca.ulaval.glo2004.domain.Accessoires.Accessoire;
import ca.ulaval.glo2004.domain.Accessoires.TypeAccessoire;
import ca.ulaval.glo2004.domain.Rampe.*;
import ca.ulaval.glo2004.domain.mesh.Mesh;
import ca.ulaval.glo2004.domain.mesh.Point3D;
import ca.ulaval.glo2004.domain.patio.*;
import ca.ulaval.glo2004.gui.dto.*;
import ca.ulaval.glo2004.gui.modes.TransparenceMode;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

public class MainWindow extends JFrame {

    private final Controller controller;
    PopUpPrix popUpPrix = new PopUpPrix(this);
    Optimisation popUpOptimisation = new Optimisation(this);
    private Color couleurRecouvrementAvant;

    private TransparenceMode modeTransparence;

    protected boolean modeSelection = false;
    protected boolean inUndo;
    protected boolean setType = false;

    // HashMaps
    private HashMap<Class<?>, Color> couleurs = new HashMap<Class<?>, Color>() {
        {
            put(Solive.class, new Color(211, 159, 129, 255));
            put(PoutrePlanche.class, new Color(91, 64, 45, 255));
            put(Poteau.class, new Color(103, 71, 41, 255));
            put(RecouvrementPlanche.class, new Color(185, 122, 87, 255));
            Color couleurRampe = new Color(109, 65, 37);
            put(Balustre.class, couleurRampe);
            put(Traverse.class, couleurRampe);
            put(Barreau.class, couleurRampe);
            put(MainCourante.class, couleurRampe);
            put(Marche.class, couleurRampe);
            put(Contremarche.class, couleurRampe.darker());
            put(Accessoire.class, new Color(25, 201, 200, 255));
        }
    };
    private HashMap<Class<?>, Boolean> visibilites = new HashMap<Class<?>, Boolean>() {
        {
            put(PoutrePlanche.class, true);
            put(Solive.class, true);
            put(Poteau.class, true);
            put(RecouvrementPlanche.class, true);
            put(Balustre.class, true);
            put(Traverse.class, true);
            put(Barreau.class, true);
            put(MainCourante.class, true);
            put(Marche.class, true);
            put(Contremarche.class, true);
            put(Accessoire.class, false);
        }
    };

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        fenetrePrincipale = new JPanel();
        fenetrePrincipale.setLayout(new BorderLayout(0, 0));
        fenetrePrincipale.setBackground(new Color(-15983573));
        fenetrePrincipale.setFocusable(true);
        Font fenetrePrincipaleFont = this.$$$getFont$$$(null, -1, -1, fenetrePrincipale.getFont());
        if (fenetrePrincipaleFont != null) fenetrePrincipale.setFont(fenetrePrincipaleFont);
        fenetrePrincipale.setMinimumSize(new Dimension(1500, 800));
        fenetrePrincipale.setOpaque(true);
        fenetrePrincipale.setPreferredSize(new Dimension(1500, 800));
        patioPanel = new JPanel();
        patioPanel.setLayout(new BorderLayout(0, 0));
        patioPanel.setBackground(new Color(-10264226));
        fenetrePrincipale.add(patioPanel, BorderLayout.CENTER);
        bottomBarPanel = new JPanel();
        bottomBarPanel.setLayout(new BorderLayout(0, 0));
        bottomBarPanel.setBackground(new Color(-15259597));
        bottomBarPanel.setPreferredSize(new Dimension(0, 300));
        bottomBarPanel.setRequestFocusEnabled(true);
        patioPanel.add(bottomBarPanel, BorderLayout.SOUTH);
        visuelPanel = new JPanel();
        visuelPanel.setLayout(new GridLayoutManager(2, 1, new Insets(20, 10, 20, 10), -1, -1));
        visuelPanel.setBackground(new Color(-15259597));
        visuelPanel.setMinimumSize(new Dimension(416, 380));
        visuelPanel.setOpaque(true);
        visuelPanel.setPreferredSize(new Dimension(350, 380));
        visuelPanel.setRequestFocusEnabled(true);
        bottomBarPanel.add(visuelPanel, BorderLayout.EAST);
        visibilitePanel = new JPanel();
        visibilitePanel.setLayout(new GridLayoutManager(7, 2, new Insets(5, 20, 5, 20), -1, -1, true, false));
        visibilitePanel.setBackground(new Color(-1));
        visibilitePanel.setOpaque(false);
        visuelPanel.add(visibilitePanel, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, -1), null, 0, false));
        visibilitePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Affichage", TitledBorder.CENTER, TitledBorder.TOP, null, new Color(-8856597)));
        poteauVisibilite = new JToggleButton();
        poteauVisibilite.setBackground(new Color(-11157193));
        poteauVisibilite.setBorderPainted(false);
        poteauVisibilite.setHorizontalTextPosition(2);
        poteauVisibilite.setIconTextGap(4);
        poteauVisibilite.setSelected(true);
        poteauVisibilite.setText("Poteaux");
        visibilitePanel.add(poteauVisibilite, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(107, 20), null, 0, false));
        solivesVisibilite = new JToggleButton();
        solivesVisibilite.setBackground(new Color(-10912772));
        solivesVisibilite.setHorizontalTextPosition(2);
        solivesVisibilite.setIconTextGap(4);
        solivesVisibilite.setText("Solives");
        visibilitePanel.add(solivesVisibilite, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        recouvrementVisibilite = new JToggleButton();
        recouvrementVisibilite.setBackground(new Color(-8856597));
        recouvrementVisibilite.setHorizontalTextPosition(2);
        recouvrementVisibilite.setIconTextGap(4);
        recouvrementVisibilite.setText("Recouvrement");
        visibilitePanel.add(recouvrementVisibilite, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(107, 20), null, 0, false));
        poutreVisibilite = new JToggleButton();
        poutreVisibilite.setBackground(new Color(-696452));
        poutreVisibilite.setHorizontalTextPosition(2);
        poutreVisibilite.setIconTextGap(4);
        poutreVisibilite.setText("Poutres");
        visibilitePanel.add(poutreVisibilite, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        slider1 = new JSlider();
        slider1.setMaximum(255);
        slider1.setMinimum(10);
        visibilitePanel.add(slider1, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, -1), null, 0, false));
        modificationLabel = new JLabel();
        modificationLabel.setForeground(new Color(-8856597));
        modificationLabel.setText("Modifications - Poteaux");
        visibilitePanel.add(modificationLabel, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        visibleCheckBox = new JCheckBox();
        visibleCheckBox.setForeground(new Color(-8856597));
        visibleCheckBox.setHorizontalAlignment(0);
        visibleCheckBox.setHorizontalTextPosition(2);
        visibleCheckBox.setSelected(true);
        visibleCheckBox.setText("Visible");
        visibilitePanel.add(visibleCheckBox, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(107, 21), null, 0, false));
        couleurButton = new JButton();
        couleurButton.setText("Couleur");
        visibilitePanel.add(couleurButton, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rampeVisibilite = new JToggleButton();
        rampeVisibilite.setBackground(new Color(-257270));
        rampeVisibilite.setHorizontalTextPosition(2);
        rampeVisibilite.setIconTextGap(4);
        rampeVisibilite.setText("Rampe");
        visibilitePanel.add(rampeVisibilite, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(107, 20), null, 0, false));
        accessoiresVisibilite = new JToggleButton();
        accessoiresVisibilite.setBackground(new Color(-206521));
        accessoiresVisibilite.setHideActionText(false);
        accessoiresVisibilite.setHorizontalTextPosition(2);
        accessoiresVisibilite.setText("Accessoires");
        visibilitePanel.add(accessoiresVisibilite, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        final JToolBar.Separator toolBar$Separator1 = new JToolBar.Separator();
        visibilitePanel.add(toolBar$Separator1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-8856597));
        label1.setText("Transparence");
        visibilitePanel.add(label1, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sortiesPanel = new JPanel();
        sortiesPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 20, 20, 20), 20, -1));
        sortiesPanel.setBackground(new Color(-14735571));
        sortiesPanel.setOpaque(false);
        sortiesPanel.setPreferredSize(new Dimension(455, 380));
        bottomBarPanel.add(sortiesPanel, BorderLayout.WEST);
        tabbedPane1 = new JTabbedPane();
        tabbedPane1.setTabLayoutPolicy(0);
        tabbedPane1.setTabPlacement(1);
        sortiesPanel.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        listePiecePanel = new JPanel();
        listePiecePanel.setLayout(new BorderLayout(0, 0));
        tabbedPane1.addTab("Liste des matériaux                   ", new ImageIcon(getClass().getResource("/list-text.png")), listePiecePanel);
        final JLabel label2 = new JLabel();
        label2.setBackground(new Color(-8856597));
        label2.setDoubleBuffered(false);
        Font label2Font = this.$$$getFont$$$(null, -1, 16, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setForeground(new Color(-16777216));
        label2.setHorizontalAlignment(0);
        label2.setOpaque(true);
        label2.setText("Liste des pièces");
        listePiecePanel.add(label2, BorderLayout.NORTH);
        jScrollListe = new JScrollPane();
        jScrollListe.setBackground(new Color(-394498));
        jScrollListe.setHorizontalScrollBarPolicy(30);
        jScrollListe.setOpaque(true);
        jScrollListe.setVerticalScrollBarPolicy(20);
        listePiecePanel.add(jScrollListe, BorderLayout.CENTER);
        listeMateriel = new JTextPane();
        listeMateriel.setAutoscrolls(false);
        listeMateriel.setBackground(new Color(-1));
        listeMateriel.setContentType("text/html");
        listeMateriel.setEditable(false);
        Font listeMaterielFont = this.$$$getFont$$$(null, -1, 9, listeMateriel.getFont());
        if (listeMaterielFont != null) listeMateriel.setFont(listeMaterielFont);
        listeMateriel.setForeground(new Color(-16777216));
        listeMateriel.setPreferredSize(new Dimension(1, 400));
        listeMateriel.setText("<html>\r\n  <head>\r\n    \r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n");
        jScrollListe.setViewportView(listeMateriel);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setBackground(new Color(-8421236));
        panel1.setPreferredSize(new Dimension(0, 20));
        listePiecePanel.add(panel1, BorderLayout.SOUTH);
        sauvegarderButton1 = new JButton();
        sauvegarderButton1.setText("Sauvegarder");
        panel1.add(sauvegarderButton1, BorderLayout.WEST);
        final JLabel label3 = new JLabel();
        label3.setHorizontalAlignment(4);
        label3.setPreferredSize(new Dimension(62, 20));
        label3.setText("Coût total : ");
        panel1.add(label3, BorderLayout.CENTER);
        prixTotal = new JLabel();
        prixTotal.setBackground(new Color(-1));
        prixTotal.setForeground(new Color(-16777216));
        prixTotal.setHorizontalAlignment(0);
        prixTotal.setOpaque(true);
        prixTotal.setPreferredSize(new Dimension(100, 16));
        prixTotal.setText("");
        panel1.add(prixTotal, BorderLayout.EAST);
        comboBoxListe = new JPanel();
        comboBoxListe.setLayout(new BorderLayout(0, 0));
        comboBoxListe.setBackground(new Color(-1029));
        comboBoxListe.setEnabled(false);
        comboBoxListe.setForeground(new Color(-11774358));
        tabbedPane1.addTab("Options                                   ", new ImageIcon(getClass().getResource("/settings.png")), comboBoxListe);
        final JLabel label4 = new JLabel();
        label4.setBackground(new Color(-8856597));
        label4.setDoubleBuffered(false);
        Font label4Font = this.$$$getFont$$$(null, -1, 16, label4.getFont());
        if (label4Font != null) label4.setFont(label4Font);
        label4.setForeground(new Color(-16777216));
        label4.setHorizontalAlignment(0);
        label4.setOpaque(true);
        label4.setText("Options");
        comboBoxListe.add(label4, BorderLayout.NORTH);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 2, new Insets(0, 40, 0, 40), -1, -1));
        panel2.setOpaque(false);
        panel2.putClientProperty("html.disable", Boolean.FALSE);
        comboBoxListe.add(panel2, BorderLayout.CENTER);
        appuiCheckListe = new JCheckBox();
        appuiCheckListe.setBackground(new Color(-1029));
        appuiCheckListe.setForeground(new Color(-11774358));
        appuiCheckListe.setLabel("Appuis");
        appuiCheckListe.setSelected(true);
        appuiCheckListe.setText("Appuis");
        panel2.add(appuiCheckListe, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        soliveCheckListe = new JCheckBox();
        soliveCheckListe.setBackground(new Color(-1029));
        soliveCheckListe.setForeground(new Color(-11774358));
        soliveCheckListe.setSelected(true);
        soliveCheckListe.setText("Solives");
        panel2.add(soliveCheckListe, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        recouvreCheckListe = new JCheckBox();
        recouvreCheckListe.setBackground(new Color(-1029));
        recouvreCheckListe.setForeground(new Color(-11774358));
        recouvreCheckListe.setSelected(true);
        recouvreCheckListe.setText("Recouvrement");
        panel2.add(recouvreCheckListe, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        poutreCheckListe = new JCheckBox();
        poutreCheckListe.setBackground(new Color(-1029));
        poutreCheckListe.setForeground(new Color(-11774358));
        poutreCheckListe.setSelected(true);
        poutreCheckListe.setText("Poutres");
        panel2.add(poutreCheckListe, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rampeCheckListe = new JCheckBox();
        rampeCheckListe.setBackground(new Color(-1029));
        rampeCheckListe.setForeground(new Color(-11774358));
        rampeCheckListe.setSelected(true);
        rampeCheckListe.setText("Garde-Corps");
        panel2.add(rampeCheckListe, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        validationPanel = new JPanel();
        validationPanel.setLayout(new GridLayoutManager(1, 1, new Insets(28, 20, 20, 20), -1, -1));
        validationPanel.setBackground(new Color(-14735571));
        validationPanel.setOpaque(false);
        validationPanel.setPreferredSize(new Dimension(100, 100));
        bottomBarPanel.add(validationPanel, BorderLayout.CENTER);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        panel3.setBackground(new Color(-1));
        validationPanel.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        valideLabel = new JLabel();
        valideLabel.setBackground(new Color(-11536757));
        valideLabel.setHorizontalAlignment(0);
        valideLabel.setOpaque(true);
        valideLabel.setPreferredSize(new Dimension(35, 20));
        valideLabel.setText("Valide!");
        panel3.add(valideLabel, BorderLayout.SOUTH);
        final JLabel label5 = new JLabel();
        label5.setBackground(new Color(-8856597));
        label5.setDoubleBuffered(false);
        Font label5Font = this.$$$getFont$$$(null, -1, 16, label5.getFont());
        if (label5Font != null) label5.setFont(label5Font);
        label5.setForeground(new Color(-16777216));
        label5.setHorizontalAlignment(0);
        label5.setOpaque(true);
        label5.setText("Validation");
        panel3.add(label5, BorderLayout.NORTH);
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setOpaque(false);
        panel3.add(scrollPane1, BorderLayout.CENTER);
        validationTextArea = new JTextArea();
        validationTextArea.setEditable(false);
        scrollPane1.setViewportView(validationTextArea);
        drawingPanel = new MainDrawingPanel();
        patioPanel.add(drawingPanel, BorderLayout.CENTER);
        accessoiresPanel = new JPanel();
        accessoiresPanel.setLayout(new BorderLayout(0, 0));
        accessoiresPanel.setPreferredSize(new Dimension(635, 145));
        accessoiresPanel.setVisible(false);
        patioPanel.add(accessoiresPanel, BorderLayout.NORTH);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setBackground(new Color(-7890782));
        panel4.setMinimumSize(new Dimension(24, 8));
        panel4.setPreferredSize(new Dimension(24, 8));
        accessoiresPanel.add(panel4, BorderLayout.SOUTH);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel5.setBackground(new Color(-13943733));
        panel5.setMinimumSize(new Dimension(647, -1));
        panel5.setPreferredSize(new Dimension(635, -1));
        panel5.setVisible(true);
        accessoiresPanel.add(panel5, BorderLayout.CENTER);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new BorderLayout(0, 0));
        panel6.setBackground(new Color(-16777216));
        panel6.setOpaque(false);
        panel6.setPreferredSize(new Dimension(100, 120));
        panel5.add(panel6);
        panel6.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label6 = new JLabel();
        label6.setBackground(new Color(-15259597));
        label6.setForeground(new Color(-1));
        label6.setHorizontalAlignment(0);
        label6.setOpaque(true);
        label6.setText("BBQ");
        panel6.add(label6, BorderLayout.SOUTH);
        bbqButton = new JButton();
        bbqButton.setIcon(new ImageIcon(getClass().getResource("/bbqicone.png")));
        bbqButton.setText("");
        panel6.add(bbqButton, BorderLayout.CENTER);
        table = new JPanel();
        table.setLayout(new BorderLayout(0, 0));
        table.setBackground(new Color(-16777216));
        table.setOpaque(false);
        table.setPreferredSize(new Dimension(100, 120));
        panel5.add(table);
        table.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label7 = new JLabel();
        label7.setBackground(new Color(-15259597));
        label7.setForeground(new Color(-1));
        label7.setHorizontalAlignment(0);
        label7.setOpaque(true);
        label7.setText("Table");
        table.add(label7, BorderLayout.SOUTH);
        tableButton = new JButton();
        tableButton.setIcon(new ImageIcon(getClass().getResource("/tableicone.png")));
        tableButton.setText("");
        table.add(tableButton, BorderLayout.CENTER);
        vase = new JPanel();
        vase.setLayout(new BorderLayout(0, 0));
        vase.setBackground(new Color(-16777216));
        vase.setOpaque(false);
        vase.setPreferredSize(new Dimension(100, 120));
        panel5.add(vase);
        vase.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label8 = new JLabel();
        label8.setBackground(new Color(-15259597));
        label8.setForeground(new Color(-1));
        label8.setHorizontalAlignment(0);
        label8.setOpaque(true);
        label8.setText("Vase");
        vase.add(label8, BorderLayout.SOUTH);
        vaseButton = new JButton();
        vaseButton.setIcon(new ImageIcon(getClass().getResource("/vaseicone.png")));
        vaseButton.setText("");
        vase.add(vaseButton, BorderLayout.CENTER);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new BorderLayout(0, 0));
        panel7.setBackground(new Color(-16777216));
        panel7.setOpaque(false);
        panel7.setPreferredSize(new Dimension(100, 120));
        panel5.add(panel7);
        panel7.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label9 = new JLabel();
        label9.setBackground(new Color(-15259597));
        label9.setForeground(new Color(-1));
        label9.setHorizontalAlignment(0);
        label9.setOpaque(true);
        label9.setText("Chaise");
        panel7.add(label9, BorderLayout.SOUTH);
        chaiseButton = new JButton();
        chaiseButton.setIcon(new ImageIcon(getClass().getResource("/chaiseicone.png")));
        chaiseButton.setText("");
        panel7.add(chaiseButton, BorderLayout.CENTER);
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new BorderLayout(0, 0));
        panel8.setBackground(new Color(-16777216));
        panel8.setOpaque(false);
        panel8.setPreferredSize(new Dimension(100, 120));
        panel5.add(panel8);
        panel8.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label10 = new JLabel();
        label10.setBackground(new Color(-15259597));
        label10.setForeground(new Color(-1));
        label10.setHorizontalAlignment(0);
        label10.setOpaque(true);
        label10.setText("Chien");
        panel8.add(label10, BorderLayout.SOUTH);
        chienButton = new JButton();
        chienButton.setIcon(new ImageIcon(getClass().getResource("/chienicone.png")));
        chienButton.setText("");
        panel8.add(chienButton, BorderLayout.CENTER);
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new BorderLayout(0, 0));
        panel9.setBackground(new Color(-16777216));
        panel9.setOpaque(false);
        panel9.setPreferredSize(new Dimension(100, 120));
        panel5.add(panel9);
        panel9.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label11 = new JLabel();
        label11.setBackground(new Color(-15259597));
        label11.setForeground(new Color(-1));
        label11.setHorizontalAlignment(0);
        label11.setOpaque(true);
        label11.setText("Plante");
        panel9.add(label11, BorderLayout.SOUTH);
        planteButton = new JButton();
        planteButton.setIcon(new ImageIcon(getClass().getResource("/planteicone.png")));
        planteButton.setText("");
        panel9.add(planteButton, BorderLayout.CENTER);
        final JPanel panel10 = new JPanel();
        panel10.setLayout(new BorderLayout(0, 0));
        panel10.setBackground(new Color(-16777216));
        panel10.setOpaque(false);
        panel10.setPreferredSize(new Dimension(100, 120));
        panel5.add(panel10);
        panel10.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label12 = new JLabel();
        label12.setBackground(new Color(-15259597));
        label12.setForeground(new Color(-1));
        label12.setHorizontalAlignment(0);
        label12.setOpaque(true);
        label12.setText("Maison");
        panel10.add(label12, BorderLayout.SOUTH);
        maisonButton = new JButton();
        maisonButton.setIcon(new ImageIcon(getClass().getResource("/maisonicone.png")));
        maisonButton.setText("");
        panel10.add(maisonButton, BorderLayout.CENTER);
        final JPanel panel11 = new JPanel();
        panel11.setLayout(new BorderLayout(0, 0));
        panel11.setBackground(new Color(-16777216));
        panel11.setOpaque(false);
        panel11.setPreferredSize(new Dimension(100, 120));
        panel5.add(panel11);
        panel11.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label13 = new JLabel();
        label13.setBackground(new Color(-15259597));
        label13.setForeground(new Color(-1));
        label13.setHorizontalAlignment(0);
        label13.setOpaque(true);
        label13.setText("Sapin");
        panel11.add(label13, BorderLayout.SOUTH);
        sapinButton = new JButton();
        sapinButton.setIcon(new ImageIcon(getClass().getResource("/sapinicone.png")));
        sapinButton.setText("");
        panel11.add(sapinButton, BorderLayout.CENTER);
        modeScrollPane = new JScrollPane();
        modeScrollPane.setBackground(new Color(-14735571));
        modeScrollPane.setHorizontalScrollBarPolicy(31);
        modeScrollPane.setOpaque(true);
        modeScrollPane.setPreferredSize(new Dimension(375, 900));
        fenetrePrincipale.add(modeScrollPane, BorderLayout.WEST);
        modeScrollPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-4079167)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        modesPanel = new JPanel();
        modesPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 15));
        modesPanel.setBackground(new Color(-15787744));
        modesPanel.setMinimumSize(new Dimension(-1, 1150));
        modesPanel.setOpaque(true);
        modesPanel.setPreferredSize(new Dimension(-1, 1150));
        modeScrollPane.setViewportView(modesPanel);
        modesTabsPanel = new JTabbedPane();
        modesTabsPanel.setBackground(new Color(-15259597));
        modesTabsPanel.setMinimumSize(new Dimension(181, -1));
        modesTabsPanel.setOpaque(false);
        modesTabsPanel.setPreferredSize(new Dimension(330, 850));
        modesTabsPanel.setRequestFocusEnabled(true);
        modesTabsPanel.setTabLayoutPolicy(1);
        modesTabsPanel.setTabPlacement(1);
        modesPanel.add(modesTabsPanel);
        modesTabsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Modes", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, modesTabsPanel.getFont()), new Color(-8856597)));
        modeNormal = new JPanel();
        modeNormal.setLayout(new GridLayoutManager(6, 1, new Insets(10, 10, 10, 10), -1, 15));
        modeNormal.setBackground(new Color(-15259597));
        modeNormal.setMinimumSize(new Dimension(-1, -1));
        modeNormal.setOpaque(false);
        modeNormal.setPreferredSize(new Dimension(-1, -1));
        modesTabsPanel.addTab("Mode normal      ", new ImageIcon(getClass().getResource("/icon_normal.png")), modeNormal, "");
        solivePanel = new JPanel();
        solivePanel.setLayout(new BorderLayout(0, 0));
        solivePanel.setOpaque(false);
        modeNormal.add(solivePanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        solivePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-10912772)), "Solives", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, solivePanel.getFont()), new Color(-1)));
        soliveSousPanel = new JPanel();
        soliveSousPanel.setLayout(new GridLayoutManager(2, 2, new Insets(10, 20, 10, 20), 20, 10));
        soliveSousPanel.setMinimumSize(new Dimension(-1, 75));
        soliveSousPanel.setOpaque(false);
        soliveSousPanel.setPreferredSize(new Dimension(-1, 0));
        solivePanel.add(soliveSousPanel, BorderLayout.CENTER);
        final JPanel panel12 = new JPanel();
        panel12.setLayout(new BorderLayout(0, 0));
        panel12.setOpaque(false);
        soliveSousPanel.add(panel12, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label14 = new JLabel();
        label14.setForeground(new Color(-1));
        label14.setOpaque(false);
        label14.setPreferredSize(new Dimension(100, 16));
        label14.setText("Type");
        panel12.add(label14, BorderLayout.WEST);
        typeSolive = new JComboBox();
        typeSolive.setAutoscrolls(false);
        typeSolive.setBackground(new Color(-1));
        typeSolive.setOpaque(true);
        typeSolive.setPreferredSize(new Dimension(-1, 30));
        panel12.add(typeSolive, BorderLayout.CENTER);
        final JLabel label15 = new JLabel();
        label15.setForeground(new Color(-87253));
        label15.setHorizontalAlignment(0);
        label15.setMinimumSize(new Dimension(40, 0));
        label15.setOpaque(false);
        label15.setPreferredSize(new Dimension(40, 16));
        label15.setText("");
        panel12.add(label15, BorderLayout.EAST);
        final JPanel panel13 = new JPanel();
        panel13.setLayout(new BorderLayout(0, 0));
        panel13.setOpaque(false);
        soliveSousPanel.add(panel13, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label16 = new JLabel();
        label16.setForeground(new Color(-1));
        label16.setOpaque(false);
        label16.setPreferredSize(new Dimension(100, 16));
        label16.setText("Espacement");
        panel13.add(label16, BorderLayout.WEST);
        espSolive = new JTextField();
        espSolive.setBackground(new Color(-1));
        espSolive.setHorizontalAlignment(0);
        espSolive.setMaximumSize(new Dimension(100, 2147483647));
        espSolive.setOpaque(true);
        espSolive.setPreferredSize(new Dimension(-1, 30));
        espSolive.setText("16");
        panel13.add(espSolive, BorderLayout.CENTER);
        final JLabel label17 = new JLabel();
        label17.setForeground(new Color(-1));
        label17.setHorizontalAlignment(0);
        label17.setMinimumSize(new Dimension(40, 16));
        label17.setOpaque(false);
        label17.setPreferredSize(new Dimension(40, 16));
        label17.setText("pi-po");
        panel13.add(label17, BorderLayout.EAST);
        poteauxPanel = new JPanel();
        poteauxPanel.setLayout(new BorderLayout(0, 0));
        poteauxPanel.setOpaque(false);
        modeNormal.add(poteauxPanel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        poteauxPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-11157193)), "Poteaux", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, poteauxPanel.getFont()), new Color(-1)));
        final JPanel panel14 = new JPanel();
        panel14.setLayout(new GridLayoutManager(2, 3, new Insets(10, 20, 10, 20), 20, 10));
        panel14.setMinimumSize(new Dimension(-1, 75));
        panel14.setOpaque(false);
        panel14.setPreferredSize(new Dimension(0, 0));
        poteauxPanel.add(panel14, BorderLayout.CENTER);
        final JPanel panel15 = new JPanel();
        panel15.setLayout(new BorderLayout(0, 0));
        panel15.setOpaque(false);
        panel14.add(panel15, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label18 = new JLabel();
        Font label18Font = this.$$$getFont$$$(null, -1, -1, label18.getFont());
        if (label18Font != null) label18.setFont(label18Font);
        label18.setForeground(new Color(-1));
        label18.setMinimumSize(new Dimension(51, 16));
        label18.setOpaque(false);
        label18.setPreferredSize(new Dimension(100, 16));
        label18.setText("Type");
        panel15.add(label18, BorderLayout.WEST);
        typePoteau = new JComboBox();
        typePoteau.setAutoscrolls(false);
        typePoteau.setBackground(new Color(-1));
        typePoteau.setOpaque(true);
        typePoteau.setPreferredSize(new Dimension(-1, 30));
        panel15.add(typePoteau, BorderLayout.CENTER);
        final JLabel label19 = new JLabel();
        label19.setForeground(new Color(-87253));
        label19.setHorizontalAlignment(0);
        label19.setMinimumSize(new Dimension(40, 0));
        label19.setPreferredSize(new Dimension(40, 16));
        label19.setText("");
        panel15.add(label19, BorderLayout.EAST);
        final JPanel panel16 = new JPanel();
        panel16.setLayout(new BorderLayout(0, 0));
        panel16.setOpaque(false);
        panel14.add(panel16, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        quantiteePoteaux = new JTextField();
        quantiteePoteaux.setBackground(new Color(-1));
        quantiteePoteaux.setHorizontalAlignment(0);
        quantiteePoteaux.setMaximumSize(new Dimension(100, 2147483647));
        quantiteePoteaux.setOpaque(true);
        quantiteePoteaux.setPreferredSize(new Dimension(80, 30));
        quantiteePoteaux.setText("2");
        panel16.add(quantiteePoteaux, BorderLayout.CENTER);
        final JLabel label20 = new JLabel();
        label20.setForeground(new Color(-87253));
        label20.setHorizontalAlignment(0);
        label20.setMinimumSize(new Dimension(40, 0));
        label20.setOpaque(false);
        label20.setPreferredSize(new Dimension(40, 16));
        label20.setText("");
        panel16.add(label20, BorderLayout.EAST);
        final JLabel label21 = new JLabel();
        label21.setForeground(new Color(-1));
        label21.setPreferredSize(new Dimension(100, 16));
        label21.setText("<html>Quantité par<br>poutres :");
        panel16.add(label21, BorderLayout.WEST);
        poutrePanel = new JPanel();
        poutrePanel.setLayout(new BorderLayout(0, 0));
        poutrePanel.setOpaque(false);
        modeNormal.add(poutrePanel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        poutrePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-630916)), "Poutres", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, poutrePanel.getFont()), new Color(-1)));
        poutreMainPanel = new JPanel();
        poutreMainPanel.setLayout(new GridLayoutManager(2, 2, new Insets(10, 20, 10, 20), 20, 10));
        poutreMainPanel.setMinimumSize(new Dimension(-1, 75));
        poutreMainPanel.setOpaque(false);
        poutreMainPanel.setPreferredSize(new Dimension(0, 0));
        poutrePanel.add(poutreMainPanel, BorderLayout.CENTER);
        quantiteePoutrePanel = new JPanel();
        quantiteePoutrePanel.setLayout(new BorderLayout(0, 0));
        quantiteePoutrePanel.setOpaque(false);
        poutreMainPanel.add(quantiteePoutrePanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        quantiteePoutreLabel = new JLabel();
        quantiteePoutreLabel.setForeground(new Color(-1));
        quantiteePoutreLabel.setPreferredSize(new Dimension(100, 16));
        quantiteePoutreLabel.setText("Quantité:");
        quantiteePoutrePanel.add(quantiteePoutreLabel, BorderLayout.WEST);
        quantitePoutre = new JTextField();
        quantitePoutre.setBackground(new Color(-1));
        quantitePoutre.setEditable(true);
        quantitePoutre.setFocusable(true);
        quantitePoutre.setHorizontalAlignment(0);
        quantitePoutre.setMinimumSize(new Dimension(70, 30));
        quantitePoutre.setPreferredSize(new Dimension(100, 30));
        quantitePoutre.setText("3");
        quantiteePoutrePanel.add(quantitePoutre, BorderLayout.CENTER);
        final JLabel label22 = new JLabel();
        label22.setForeground(new Color(-87253));
        label22.setHorizontalAlignment(0);
        label22.setMinimumSize(new Dimension(40, 0));
        label22.setPreferredSize(new Dimension(40, 16));
        label22.setText("");
        quantiteePoutrePanel.add(label22, BorderLayout.EAST);
        final JPanel panel17 = new JPanel();
        panel17.setLayout(new BorderLayout(0, 0));
        panel17.setOpaque(false);
        poutreMainPanel.add(panel17, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label23 = new JLabel();
        label23.setForeground(new Color(-1));
        label23.setOpaque(false);
        label23.setPreferredSize(new Dimension(100, 16));
        label23.setText("Type");
        panel17.add(label23, BorderLayout.WEST);
        typePoutre = new JComboBox();
        typePoutre.setAutoscrolls(true);
        typePoutre.setBackground(new Color(-1));
        typePoutre.setOpaque(true);
        typePoutre.setPreferredSize(new Dimension(-1, 30));
        panel17.add(typePoutre, BorderLayout.CENTER);
        final JLabel label24 = new JLabel();
        label24.setForeground(new Color(-87253));
        label24.setHorizontalAlignment(0);
        label24.setMinimumSize(new Dimension(40, 0));
        label24.setOpaque(false);
        label24.setPreferredSize(new Dimension(40, 16));
        label24.setText("");
        panel17.add(label24, BorderLayout.EAST);
        recouvrementPanel = new JPanel();
        recouvrementPanel.setLayout(new BorderLayout(0, 0));
        recouvrementPanel.setOpaque(false);
        modeNormal.add(recouvrementPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        recouvrementPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Recouvrement", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, recouvrementPanel.getFont()), new Color(-1)));
        final JPanel panel18 = new JPanel();
        panel18.setLayout(new GridLayoutManager(2, 2, new Insets(10, 20, 10, 20), 20, 10));
        panel18.setMinimumSize(new Dimension(-1, 75));
        panel18.setOpaque(false);
        panel18.setPreferredSize(new Dimension(-1, 0));
        recouvrementPanel.add(panel18, BorderLayout.CENTER);
        final JPanel panel19 = new JPanel();
        panel19.setLayout(new BorderLayout(0, 0));
        panel19.setOpaque(false);
        panel18.add(panel19, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label25 = new JLabel();
        label25.setForeground(new Color(-1));
        label25.setOpaque(false);
        label25.setPreferredSize(new Dimension(100, 16));
        label25.setText("Type");
        panel19.add(label25, BorderLayout.WEST);
        typeRecouvre = new JComboBox();
        typeRecouvre.setAutoscrolls(false);
        typeRecouvre.setBackground(new Color(-1));
        typeRecouvre.setOpaque(true);
        typeRecouvre.setPreferredSize(new Dimension(-1, 30));
        panel19.add(typeRecouvre, BorderLayout.CENTER);
        final JLabel label26 = new JLabel();
        label26.setForeground(new Color(-87253));
        label26.setHorizontalAlignment(0);
        label26.setMinimumSize(new Dimension(40, 0));
        label26.setOpaque(false);
        label26.setPreferredSize(new Dimension(40, 16));
        label26.setText("");
        panel19.add(label26, BorderLayout.EAST);
        final JPanel panel20 = new JPanel();
        panel20.setLayout(new BorderLayout(0, 0));
        panel20.setOpaque(false);
        panel18.add(panel20, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label27 = new JLabel();
        label27.setForeground(new Color(-1));
        label27.setOpaque(false);
        label27.setPreferredSize(new Dimension(100, 16));
        label27.setText("Espacement");
        panel20.add(label27, BorderLayout.WEST);
        espRecouvre = new JTextField();
        espRecouvre.setBackground(new Color(-1));
        espRecouvre.setHorizontalAlignment(0);
        espRecouvre.setMaximumSize(new Dimension(100, 2147483647));
        espRecouvre.setOpaque(true);
        espRecouvre.setPreferredSize(new Dimension(-1, 30));
        espRecouvre.setText("1/3");
        panel20.add(espRecouvre, BorderLayout.CENTER);
        final JLabel label28 = new JLabel();
        label28.setForeground(new Color(-1));
        label28.setHorizontalAlignment(0);
        label28.setMinimumSize(new Dimension(40, 16));
        label28.setOpaque(false);
        label28.setPreferredSize(new Dimension(40, 16));
        label28.setText("pi-po");
        panel20.add(label28, BorderLayout.EAST);
        final JPanel panel21 = new JPanel();
        panel21.setLayout(new BorderLayout(0, 0));
        panel21.setOpaque(false);
        modeNormal.add(panel21, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel21.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-87253)), "Général", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, panel21.getFont()), new Color(-1)));
        final JPanel panel22 = new JPanel();
        panel22.setLayout(new GridLayoutManager(5, 2, new Insets(10, 20, 10, 20), 20, 10));
        panel22.setMinimumSize(new Dimension(-1, 170));
        panel22.setOpaque(false);
        panel22.setPreferredSize(new Dimension(-1, 0));
        panel21.add(panel22, BorderLayout.CENTER);
        final JPanel panel23 = new JPanel();
        panel23.setLayout(new BorderLayout(0, 0));
        panel23.setBackground(new Color(-14735571));
        panel23.setOpaque(false);
        panel22.add(panel23, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label29 = new JLabel();
        label29.setForeground(new Color(-1));
        label29.setPreferredSize(new Dimension(100, 16));
        label29.setText("Porte-a-faux");
        panel23.add(label29, BorderLayout.WEST);
        longueurPorteAFo = new JTextField();
        longueurPorteAFo.setBackground(new Color(-1));
        longueurPorteAFo.setEditable(true);
        longueurPorteAFo.setFocusable(true);
        longueurPorteAFo.setHorizontalAlignment(0);
        longueurPorteAFo.setMinimumSize(new Dimension(-1, 20));
        longueurPorteAFo.setPreferredSize(new Dimension(-1, 20));
        longueurPorteAFo.setText("13");
        panel23.add(longueurPorteAFo, BorderLayout.CENTER);
        final JLabel label30 = new JLabel();
        label30.setForeground(new Color(-1));
        label30.setHorizontalAlignment(0);
        label30.setMinimumSize(new Dimension(40, 16));
        label30.setOpaque(false);
        label30.setPreferredSize(new Dimension(40, 16));
        label30.setText("pi-po");
        panel23.add(label30, BorderLayout.EAST);
        final JPanel panel24 = new JPanel();
        panel24.setLayout(new BorderLayout(0, 0));
        panel24.setBackground(new Color(-14735571));
        panel24.setOpaque(false);
        panel22.add(panel24, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label31 = new JLabel();
        label31.setForeground(new Color(-1));
        label31.setPreferredSize(new Dimension(100, 16));
        label31.setText("Largeur");
        panel24.add(label31, BorderLayout.WEST);
        largeurPatio = new JTextField();
        largeurPatio.setBackground(new Color(-1));
        largeurPatio.setEditable(true);
        largeurPatio.setFocusable(true);
        largeurPatio.setHorizontalAlignment(0);
        largeurPatio.setMinimumSize(new Dimension(-1, 20));
        largeurPatio.setPreferredSize(new Dimension(-1, 20));
        largeurPatio.setText("100");
        panel24.add(largeurPatio, BorderLayout.CENTER);
        final JLabel label32 = new JLabel();
        label32.setForeground(new Color(-1));
        label32.setHorizontalAlignment(0);
        label32.setMinimumSize(new Dimension(40, 16));
        label32.setOpaque(false);
        label32.setPreferredSize(new Dimension(40, 16));
        label32.setText("pi-po");
        panel24.add(label32, BorderLayout.EAST);
        final JPanel panel25 = new JPanel();
        panel25.setLayout(new BorderLayout(0, 0));
        panel25.setBackground(new Color(-14735571));
        panel25.setOpaque(false);
        panel22.add(panel25, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label33 = new JLabel();
        label33.setForeground(new Color(-1));
        label33.setPreferredSize(new Dimension(100, 16));
        label33.setText("Longueur");
        panel25.add(label33, BorderLayout.WEST);
        longueurPatio = new JTextField();
        longueurPatio.setBackground(new Color(-1));
        longueurPatio.setEditable(true);
        longueurPatio.setFocusable(true);
        longueurPatio.setHorizontalAlignment(0);
        longueurPatio.setMinimumSize(new Dimension(-1, 20));
        longueurPatio.setPreferredSize(new Dimension(-1, 20));
        longueurPatio.setText("250");
        panel25.add(longueurPatio, BorderLayout.CENTER);
        final JLabel label34 = new JLabel();
        label34.setForeground(new Color(-1));
        label34.setHorizontalAlignment(0);
        label34.setMinimumSize(new Dimension(40, 16));
        label34.setOpaque(false);
        label34.setPreferredSize(new Dimension(40, 16));
        label34.setText("pi-po");
        panel25.add(label34, BorderLayout.EAST);
        final JPanel panel26 = new JPanel();
        panel26.setLayout(new BorderLayout(0, 0));
        panel26.setBackground(new Color(-14735571));
        panel26.setOpaque(false);
        panel22.add(panel26, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label35 = new JLabel();
        label35.setForeground(new Color(-1));
        label35.setPreferredSize(new Dimension(100, 16));
        label35.setText("Hauteur");
        panel26.add(label35, BorderLayout.WEST);
        hauteurPatio = new JTextField();
        hauteurPatio.setBackground(new Color(-1));
        hauteurPatio.setEditable(true);
        hauteurPatio.setFocusable(true);
        hauteurPatio.setHorizontalAlignment(0);
        hauteurPatio.setMinimumSize(new Dimension(-1, 20));
        hauteurPatio.setPreferredSize(new Dimension(-1, 20));
        hauteurPatio.setText("96");
        panel26.add(hauteurPatio, BorderLayout.CENTER);
        final JLabel label36 = new JLabel();
        label36.setForeground(new Color(-1));
        label36.setHorizontalAlignment(0);
        label36.setMinimumSize(new Dimension(40, 16));
        label36.setOpaque(false);
        label36.setPreferredSize(new Dimension(40, 16));
        label36.setText("pi-po");
        panel26.add(label36, BorderLayout.EAST);
        final JToolBar.Separator toolBar$Separator2 = new JToolBar.Separator();
        panel22.add(toolBar$Separator2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modeMagique = new JPanel();
        modeMagique.setLayout(new GridLayoutManager(4, 1, new Insets(10, 10, 50, 10), -1, 20));
        modeMagique.setBackground(new Color(-15259597));
        modeMagique.setMinimumSize(new Dimension(-1, 300));
        modeMagique.setOpaque(false);
        modeMagique.setPreferredSize(new Dimension(-1, 300));
        modeMagique.setRequestFocusEnabled(true);
        modesTabsPanel.addTab("Mode magique       ", new ImageIcon(getClass().getResource("/icon_magic.png")), modeMagique, "");
        dimensionPanel = new JPanel();
        dimensionPanel.setLayout(new BorderLayout(0, 0));
        dimensionPanel.setOpaque(false);
        modeMagique.add(dimensionPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        dimensionPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-87253)), "Dimensions du patio", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, dimensionPanel.getFont()), new Color(-1)));
        final JPanel panel27 = new JPanel();
        panel27.setLayout(new GridLayoutManager(3, 2, new Insets(20, 20, 20, 20), -1, 10));
        panel27.setMinimumSize(new Dimension(280, 50));
        panel27.setOpaque(false);
        panel27.setPreferredSize(new Dimension(0, 50));
        dimensionPanel.add(panel27, BorderLayout.CENTER);
        longueurMagiquePanel = new JPanel();
        longueurMagiquePanel.setLayout(new BorderLayout(0, 0));
        longueurMagiquePanel.setOpaque(false);
        panel27.add(longueurMagiquePanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label37 = new JLabel();
        label37.setForeground(new Color(-1));
        label37.setPreferredSize(new Dimension(100, 16));
        label37.setText("Longueur");
        longueurMagiquePanel.add(label37, BorderLayout.WEST);
        longueurMagique = new JTextField();
        longueurMagique.setBackground(new Color(-1));
        longueurMagique.setMaximumSize(new Dimension(100, 2147483647));
        longueurMagique.setPreferredSize(new Dimension(80, 30));
        longueurMagique.setText("16-0");
        longueurMagiquePanel.add(longueurMagique, BorderLayout.CENTER);
        final JLabel label38 = new JLabel();
        label38.setForeground(new Color(-1));
        label38.setHorizontalAlignment(0);
        label38.setMinimumSize(new Dimension(40, 16));
        label38.setPreferredSize(new Dimension(40, 16));
        label38.setText("pi-po");
        longueurMagiquePanel.add(label38, BorderLayout.EAST);
        largeurMagiquePanel = new JPanel();
        largeurMagiquePanel.setLayout(new BorderLayout(0, 0));
        largeurMagiquePanel.setOpaque(false);
        panel27.add(largeurMagiquePanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label39 = new JLabel();
        label39.setForeground(new Color(-1));
        label39.setPreferredSize(new Dimension(100, 16));
        label39.setText("Largeur");
        largeurMagiquePanel.add(label39, BorderLayout.WEST);
        largeurMagique = new JTextField();
        largeurMagique.setBackground(new Color(-1));
        largeurMagique.setMaximumSize(new Dimension(100, 2147483647));
        largeurMagique.setPreferredSize(new Dimension(80, 30));
        largeurMagique.setText("6-0");
        largeurMagiquePanel.add(largeurMagique, BorderLayout.CENTER);
        final JLabel label40 = new JLabel();
        label40.setForeground(new Color(-1));
        label40.setHorizontalAlignment(0);
        label40.setMinimumSize(new Dimension(40, 16));
        label40.setPreferredSize(new Dimension(40, 16));
        label40.setText("pi-po");
        largeurMagiquePanel.add(label40, BorderLayout.EAST);
        hauteurMagiquePanel = new JPanel();
        hauteurMagiquePanel.setLayout(new BorderLayout(0, 0));
        hauteurMagiquePanel.setFocusable(true);
        hauteurMagiquePanel.setOpaque(false);
        panel27.add(hauteurMagiquePanel, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label41 = new JLabel();
        label41.setForeground(new Color(-1));
        label41.setPreferredSize(new Dimension(100, 16));
        label41.setText("Hauteur");
        hauteurMagiquePanel.add(label41, BorderLayout.WEST);
        hauteurMagique = new JTextField();
        hauteurMagique.setBackground(new Color(-1));
        hauteurMagique.setMaximumSize(new Dimension(100, 2147483647));
        hauteurMagique.setPreferredSize(new Dimension(80, 30));
        hauteurMagique.setText("4-0");
        hauteurMagiquePanel.add(hauteurMagique, BorderLayout.CENTER);
        final JLabel label42 = new JLabel();
        label42.setForeground(new Color(-1));
        label42.setHorizontalAlignment(0);
        label42.setMinimumSize(new Dimension(40, 16));
        label42.setPreferredSize(new Dimension(40, 16));
        label42.setText("pi-po");
        hauteurMagiquePanel.add(label42, BorderLayout.EAST);
        recouvrementMagiquePanel = new JPanel();
        recouvrementMagiquePanel.setLayout(new BorderLayout(0, 0));
        recouvrementMagiquePanel.setOpaque(false);
        modeMagique.add(recouvrementMagiquePanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        recouvrementMagiquePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Recouvrement", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, recouvrementMagiquePanel.getFont()), new Color(-1)));
        final JPanel panel28 = new JPanel();
        panel28.setLayout(new GridLayoutManager(2, 2, new Insets(20, 20, 20, 20), 20, 10));
        panel28.setMinimumSize(new Dimension(274, 50));
        panel28.setOpaque(false);
        panel28.setPreferredSize(new Dimension(0, 50));
        recouvrementMagiquePanel.add(panel28, BorderLayout.CENTER);
        epaisseurMagiquePanel = new JPanel();
        epaisseurMagiquePanel.setLayout(new BorderLayout(0, 0));
        epaisseurMagiquePanel.setOpaque(false);
        panel28.add(epaisseurMagiquePanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label43 = new JLabel();
        label43.setForeground(new Color(-1));
        label43.setPreferredSize(new Dimension(100, 16));
        label43.setText("Type");
        epaisseurMagiquePanel.add(label43, BorderLayout.WEST);
        epaisseurMagique = new JComboBox();
        epaisseurMagique.setBackground(new Color(-1));
        epaisseurMagique.setMaximumSize(new Dimension(100, 2147483647));
        epaisseurMagique.setPreferredSize(new Dimension(80, 30));
        epaisseurMagiquePanel.add(epaisseurMagique, BorderLayout.CENTER);
        final JLabel label44 = new JLabel();
        label44.setForeground(new Color(-87253));
        label44.setHorizontalAlignment(0);
        label44.setPreferredSize(new Dimension(40, 16));
        label44.setText("");
        epaisseurMagiquePanel.add(label44, BorderLayout.EAST);
        espacementMagiquePanel = new JPanel();
        espacementMagiquePanel.setLayout(new BorderLayout(0, 0));
        espacementMagiquePanel.setOpaque(false);
        panel28.add(espacementMagiquePanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label45 = new JLabel();
        label45.setForeground(new Color(-1));
        label45.setPreferredSize(new Dimension(100, 16));
        label45.setText("Espacement");
        espacementMagiquePanel.add(label45, BorderLayout.WEST);
        espacementMagique = new JTextField();
        espacementMagique.setAutoscrolls(true);
        espacementMagique.setBackground(new Color(-1));
        espacementMagique.setMaximumSize(new Dimension(100, 2147483647));
        espacementMagique.setPreferredSize(new Dimension(80, 30));
        espacementMagique.setText("1");
        espacementMagiquePanel.add(espacementMagique, BorderLayout.CENTER);
        final JLabel label46 = new JLabel();
        label46.setForeground(new Color(-1));
        label46.setHorizontalAlignment(0);
        label46.setMinimumSize(new Dimension(40, 16));
        label46.setPreferredSize(new Dimension(40, 16));
        label46.setText("pi-po");
        espacementMagiquePanel.add(label46, BorderLayout.EAST);
        creerButton = new JButton();
        creerButton.setBackground(new Color(-8856597));
        Font creerButtonFont = this.$$$getFont$$$(null, -1, 48, creerButton.getFont());
        if (creerButtonFont != null) creerButton.setFont(creerButtonFont);
        creerButton.setText("Créer");
        modeMagique.add(creerButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 100), null, 0, false));
        final JPanel panel29 = new JPanel();
        panel29.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel29.setOpaque(false);
        modeMagique.add(panel29, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel30 = new JPanel();
        panel30.setLayout(new BorderLayout(0, 0));
        panel30.setOpaque(false);
        panel30.setPreferredSize(new Dimension(330, 220));
        modesPanel.add(panel30);
        panel30.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-1)), "Rampe", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, panel30.getFont()), new Color(-1)));
        final JPanel panel31 = new JPanel();
        panel31.setLayout(new GridLayoutManager(3, 2, new Insets(10, 20, 10, 20), 20, 10));
        panel31.setMinimumSize(new Dimension(-1, -1));
        panel31.setOpaque(false);
        panel31.setPreferredSize(new Dimension(0, 0));
        panel30.add(panel31, BorderLayout.CENTER);
        final JPanel panel32 = new JPanel();
        panel32.setLayout(new BorderLayout(0, 0));
        panel32.setOpaque(false);
        panel31.add(panel32, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label47 = new JLabel();
        label47.setForeground(new Color(-1));
        label47.setOpaque(false);
        label47.setPreferredSize(new Dimension(100, 16));
        label47.setText("Balustrade");
        panel32.add(label47, BorderLayout.WEST);
        typeBalustrade = new JComboBox();
        typeBalustrade.setAutoscrolls(false);
        typeBalustrade.setBackground(new Color(-1));
        typeBalustrade.setMinimumSize(new Dimension(84, -1));
        typeBalustrade.setOpaque(true);
        typeBalustrade.setPreferredSize(new Dimension(-1, -1));
        panel32.add(typeBalustrade, BorderLayout.CENTER);
        final JLabel label48 = new JLabel();
        label48.setForeground(new Color(-87253));
        label48.setHorizontalAlignment(0);
        label48.setMinimumSize(new Dimension(40, 0));
        label48.setOpaque(false);
        label48.setPreferredSize(new Dimension(40, 16));
        label48.setText("");
        panel32.add(label48, BorderLayout.EAST);
        final JPanel panel33 = new JPanel();
        panel33.setLayout(new BorderLayout(0, 0));
        panel33.setOpaque(false);
        panel31.add(panel33, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label49 = new JLabel();
        label49.setForeground(new Color(-1));
        label49.setOpaque(false);
        label49.setPreferredSize(new Dimension(100, 16));
        label49.setText("Hauteur");
        panel33.add(label49, BorderLayout.WEST);
        hauteurRampe = new JTextField();
        hauteurRampe.setBackground(new Color(-1));
        hauteurRampe.setHorizontalAlignment(0);
        hauteurRampe.setMaximumSize(new Dimension(100, 2147483647));
        hauteurRampe.setMinimumSize(new Dimension(49, -1));
        hauteurRampe.setOpaque(true);
        hauteurRampe.setPreferredSize(new Dimension(-1, -1));
        hauteurRampe.setText("42");
        panel33.add(hauteurRampe, BorderLayout.CENTER);
        final JLabel label50 = new JLabel();
        label50.setForeground(new Color(-1));
        label50.setHorizontalAlignment(0);
        label50.setMinimumSize(new Dimension(40, 16));
        label50.setOpaque(false);
        label50.setPreferredSize(new Dimension(40, 16));
        label50.setText("pi-po");
        panel33.add(label50, BorderLayout.EAST);
        final JPanel panel34 = new JPanel();
        panel34.setLayout(new BorderLayout(0, 0));
        panel34.setOpaque(false);
        panel31.add(panel34, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        genererRampe = new JCheckBox();
        genererRampe.setForeground(new Color(-1));
        genererRampe.setSelected(true);
        genererRampe.setText("Générer");
        panel34.add(genererRampe, BorderLayout.WEST);
        topBarPanel = new JPanel();
        topBarPanel.setLayout(new BorderLayout(0, 0));
        fenetrePrincipale.add(topBarPanel, BorderLayout.NORTH);
        toolBar = new JToolBar();
        toolBar.setBackground(new Color(-15787744));
        toolBar.setBorderPainted(false);
        toolBar.setFloatable(false);
        toolBar.setMargin(new Insets(10, 10, 10, 0));
        toolBar.setOpaque(true);
        toolBar.setVisible(true);
        topBarPanel.add(toolBar, BorderLayout.CENTER);
        final JPanel panel35 = new JPanel();
        panel35.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel35.setOpaque(false);
        toolBar.add(panel35);
        panel35.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Fichier", TitledBorder.CENTER, TitledBorder.BOTTOM, null, new Color(-8856597)));
        nouveauProjetButton = new JButton();
        nouveauProjetButton.setIcon(new ImageIcon(getClass().getResource("/icon_new3.png")));
        nouveauProjetButton.setMargin(new Insets(0, 0, 0, 0));
        nouveauProjetButton.setText("");
        nouveauProjetButton.setToolTipText("Nouveau projet");
        panel35.add(nouveauProjetButton);
        ouvrirProjetButton = new JButton();
        ouvrirProjetButton.setIcon(new ImageIcon(getClass().getResource("/icon_open3.png")));
        ouvrirProjetButton.setMargin(new Insets(0, 0, 0, 0));
        ouvrirProjetButton.setText("");
        ouvrirProjetButton.setToolTipText("Ouvrir un projet");
        panel35.add(ouvrirProjetButton);
        sauvegarderButton = new JButton();
        sauvegarderButton.setIcon(new ImageIcon(getClass().getResource("/icon_save3.png")));
        sauvegarderButton.setText("");
        sauvegarderButton.setToolTipText("Sauvegarder ");
        panel35.add(sauvegarderButton);
        final JToolBar.Separator toolBar$Separator3 = new JToolBar.Separator();
        toolBar.add(toolBar$Separator3);
        final JPanel panel36 = new JPanel();
        panel36.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel36.setOpaque(false);
        toolBar.add(panel36);
        panel36.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Edition", TitledBorder.CENTER, TitledBorder.BOTTOM, null, new Color(-8856597)));
        undoButton = new JButton();
        undoButton.setIcon(new ImageIcon(getClass().getResource("/undo_icon.png")));
        undoButton.setMargin(new Insets(0, 0, 0, 0));
        undoButton.setText("");
        undoButton.setToolTipText("Undo - (ctrl + z)");
        panel36.add(undoButton);
        redoButton = new JButton();
        redoButton.setIcon(new ImageIcon(getClass().getResource("/redo_icon.png")));
        redoButton.setText("");
        redoButton.setToolTipText("Redo - (ctrl + y)");
        panel36.add(redoButton);
        final JToolBar.Separator toolBar$Separator4 = new JToolBar.Separator();
        toolBar.add(toolBar$Separator4);
        final JPanel panel37 = new JPanel();
        panel37.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel37.setOpaque(false);
        toolBar.add(panel37);
        panel37.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Prix", TitledBorder.CENTER, TitledBorder.BOTTOM, null, new Color(-8856597)));
        prixButton = new JButton();
        prixButton.setIcon(new ImageIcon(getClass().getResource("/dollar-symbol.png")));
        prixButton.setText("");
        prixButton.setToolTipText("Modifier les prix linéaires");
        panel37.add(prixButton);
        final JToolBar.Separator toolBar$Separator5 = new JToolBar.Separator();
        toolBar.add(toolBar$Separator5);
        final JPanel panel38 = new JPanel();
        panel38.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel38.setOpaque(false);
        toolBar.add(panel38);
        panel38.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Exportation", TitledBorder.CENTER, TitledBorder.BOTTOM, null, new Color(-8856597)));
        STLButton = new JButton();
        STLButton.setIcon(new ImageIcon(getClass().getResource("/icon_stl3.png")));
        STLButton.setMargin(new Insets(0, 0, 0, 0));
        STLButton.setText("");
        STLButton.setToolTipText("Exporter le projet en fichier .stl");
        panel38.add(STLButton);
        JPGButton = new JButton();
        JPGButton.setIcon(new ImageIcon(getClass().getResource("/icon_jpg3.png")));
        JPGButton.setText("");
        JPGButton.setToolTipText("Exporter la vue en fichier .JPG");
        panel38.add(JPGButton);
        final JToolBar.Separator toolBar$Separator6 = new JToolBar.Separator();
        toolBar.add(toolBar$Separator6);
        final JPanel panel39 = new JPanel();
        panel39.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel39.setOpaque(false);
        toolBar.add(panel39);
        panel39.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Mode", TitledBorder.CENTER, TitledBorder.BOTTOM, null, new Color(-8856597)));
        CURSEURButton = new JToggleButton();
        CURSEURButton.setIcon(new ImageIcon(getClass().getResource("/select_icon.png")));
        CURSEURButton.setText("");
        CURSEURButton.setToolTipText("Déplacer/Ajouter un accessoire");
        panel39.add(CURSEURButton);
        DEPLACEMENTButton = new JToggleButton();
        DEPLACEMENTButton.setIcon(new ImageIcon(getClass().getResource("/move_icon.png")));
        DEPLACEMENTButton.setSelected(true);
        DEPLACEMENTButton.setText("");
        DEPLACEMENTButton.setToolTipText("Déplacement");
        panel39.add(DEPLACEMENTButton);
        final JPanel panel40 = new JPanel();
        panel40.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel40.setOpaque(false);
        toolBar.add(panel40);
        panel40.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Avancé", TitledBorder.CENTER, TitledBorder.BOTTOM, null, new Color(-8856597)));
        optimisationBoutton = new JButton();
        optimisationBoutton.setIcon(new ImageIcon(getClass().getResource("/settings2.png")));
        optimisationBoutton.setText("");
        optimisationBoutton.setToolTipText("Paramètres avancés");
        panel40.add(optimisationBoutton);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(poteauVisibilite);
        buttonGroup.add(poteauVisibilite);
        buttonGroup.add(solivesVisibilite);
        buttonGroup.add(recouvrementVisibilite);
        buttonGroup.add(poutreVisibilite);
        buttonGroup.add(accessoiresVisibilite);
        buttonGroup.add(rampeVisibilite);
        buttonGroup = new ButtonGroup();
        buttonGroup.add(DEPLACEMENTButton);
        buttonGroup.add(DEPLACEMENTButton);
        buttonGroup.add(CURSEURButton);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return fenetrePrincipale;
    }

    protected ParametresDTO getValeurChamps() {
        ParametresDTO parametresDTO = new ParametresDTO();

        try {
            parametresDTO.esp_solives = getFloatFromTextFieldString(espSolive.getText());
            parametresDTO.typeSolives = new TypeBois(Objects.requireNonNull(typeSolive.getSelectedItem()).toString());
            parametresDTO.lo_porteafo = getFloatFromTextFieldString(longueurPorteAFo.getText());
            parametresDTO.nb_poutres = getIntFromTextField(quantitePoutre.getText());
            parametresDTO.nb_poteaux = getIntFromTextField(quantiteePoteaux.getText());
            parametresDTO.la_patio = getFloatFromTextFieldString(largeurPatio.getText());
            parametresDTO.lo_patio = getFloatFromTextFieldString(longueurPatio.getText());
            parametresDTO.ha_patio = getFloatFromTextFieldString(hauteurPatio.getText());
            if (Objects.requireNonNull(typePoutre.getSelectedItem()).toString().equals("auto")) {
                parametresDTO.typePoutre = null;
            } else {
                parametresDTO.typePoutre = new TypeBois(typePoutre.getSelectedItem().toString());
            }
            parametresDTO.typePoteau = new TypeBois(Objects.requireNonNull(typePoteau.getSelectedItem()).toString());
            parametresDTO.typeRecouvre = new TypeBois(Objects.requireNonNull(typeRecouvre.getSelectedItem()).toString());
            parametresDTO.esp_recouvre = getFloatFromTextFieldString(espRecouvre.getText());
            parametresDTO.ha_rampe = getFloatFromTextFieldString(hauteurRampe.getText());
            miseAJourChampsMagique(parametresDTO);
        } catch (Exception ignored) {
        }

        return parametresDTO;
    }

    private void setValeurChamps(ParametresDTO parametresDTO) {
        setType = true;
        try {
            miseAJourChampsMagique(parametresDTO);
            espSolive.setText(getStringFractionFromFloat(parametresDTO.esp_solives));
            typeSolive.setSelectedItem(String.valueOf(parametresDTO.typeSolives));
            longueurPorteAFo.setText(getStringFractionFromFloat(parametresDTO.lo_porteafo));
            quantitePoutre.setText(getStringFractionFromFloat(parametresDTO.nb_poutres));
            quantiteePoteaux.setText(getStringFractionFromFloat(parametresDTO.nb_poteaux));
            largeurPatio.setText(getStringFractionFromFloat(parametresDTO.la_patio));
            longueurPatio.setText(getStringFractionFromFloat(parametresDTO.lo_patio));
            hauteurPatio.setText(getStringFractionFromFloat(parametresDTO.ha_patio));
            if (parametresDTO.typePoutre == null) {
                typePoutre.setSelectedItem("auto");
            } else {
                typePoutre.setSelectedItem(String.valueOf(parametresDTO.typePoutre));
            }
            typePoteau.setSelectedItem(String.valueOf(parametresDTO.typePoteau));
            typeRecouvre.setSelectedItem(String.valueOf(parametresDTO.typeRecouvre));
            espRecouvre.setText(getStringFractionFromFloat(parametresDTO.esp_recouvre));
            hauteurRampe.setText(getStringFractionFromFloat(parametresDTO.ha_rampe));
        } catch (Exception ignored) {
        }
        setType = false;
    }

    protected void miseAJourChampsMagique(ParametresDTO parametresDTO) {
        longueurMagique.setText(getStringFractionFromFloat(parametresDTO.lo_patio));
        largeurMagique.setText(getStringFractionFromFloat(parametresDTO.la_patio));
        hauteurMagique.setText(getStringFractionFromFloat(parametresDTO.ha_patio));
        epaisseurMagique.setSelectedItem(parametresDTO.typeRecouvre.toString());
        espacementMagique.setText(getStringFractionFromFloat(parametresDTO.esp_recouvre));
    }

    public MainWindow() throws Exception {
        $$$setupUI$$$();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(fenetrePrincipale);
        this.setTitle("Pationator");
        Image icone = ImageIO.read(getClass().getResource("/pationator.png"));
        this.setIconImage(icone);
        this.setFocusable(true);
        this.pack();

        couleurRecouvrementAvant = couleurs.get(RecouvrementPlanche.class);

        drawingPanel.setMainWindow(this);

        modeTransparence = TransparenceMode.POTEAUX;
        slider1.setValue(couleurs.get(modeTransparence.getClasse()).getAlpha());
        visibleCheckBox.setSelected(visibilites.get(modeTransparence.getClasse()));

        typePoteau.addItem("4X4");
        typePoteau.addItem("6X6");
        typePoteau.setSelectedIndex(1);

        typeSolive.addItem("2X4");
        typeSolive.addItem("2X6");
        typeSolive.addItem("2X8");
        typeSolive.addItem("2X10");
        typeSolive.addItem("2X12");
        typeSolive.setSelectedIndex(2);

        typePoutre.addItem("auto");
        typePoutre.addItem("2X6");
        typePoutre.addItem("2X8");
        typePoutre.addItem("2X10");
        typePoutre.addItem("2X12");

        typeRecouvre.addItem("2X6");
        typeRecouvre.addItem("5/4X6");

        typeBalustrade.addItem("Modele 1");
        typeBalustrade.addItem("Modele 2");
        typeBalustrade.addItem("Modele 3");
        typeBalustrade.addItem("Modele 4");
        typeBalustrade.addItem("Modele 5");
        typeBalustrade.addItem("Modele 6");
        typeBalustrade.addItem("Modele 7");
        typeBalustrade.setSelectedIndex(0);

        epaisseurMagique.addItem("2X6");
        epaisseurMagique.addItem("5/4X6");

        PrixDTO prixDTOcreationController;
        try {
            prixDTOcreationController = popUpPrix.getPrixDTO();
        } catch (PrixException prixException) {
            prixDTOcreationController = null;
        }
        controller = new Controller(getValeurChamps(), prixDTOcreationController, getFloatFromTextFieldString(hauteurRampe.getText()), getTypeBarreaux());

        miseAJourListeMateriel(controller.getListeMateriel());

        undoButton.addActionListener(e -> {
            inUndo = true;
            try {
                SauvegardeDTO sauvegardeDTO = controller.undo();
                chargerSauvegardeDTO(sauvegardeDTO);
                miseAJourListeMateriel(controller.getListeMateriel());
                longueurPorteAFo.grabFocus();
                undoButton.grabFocus();
                // redonne focus
                if (controller.getUndo().size() == 1) {
                    undoButton.setEnabled(false);
                }

                if (!controller.getRedo().empty()) {
                    redoButton.setEnabled(true);
                }
            } catch (Exception ignored) {
            }
            inUndo = false;
            setType = false;
        });

        redoButton.addActionListener(e -> {
            inUndo = true;
            try {
                SauvegardeDTO sauvegardeDTO = controller.redo();
                chargerSauvegardeDTO(sauvegardeDTO);
                miseAJourListeMateriel(controller.getListeMateriel());
                longueurPorteAFo.grabFocus();
                undoButton.grabFocus();
                // redonne focus
                if (controller.getRedo().empty()) {
                    redoButton.setEnabled(false);
                }

                if (controller.getUndo().size() != 1) {
                    undoButton.setEnabled(true);
                }
            } catch (Exception ignored) {
            }
            inUndo = false;
            setType = false;
        });

        creerButton.addActionListener(e -> {
            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                Params paramsMagique = this.controller.creerPatioMagique(getMagiqueDTO(), popUpPrix.getPrixDTO(), getTypeBarreaux());
                boolean valide = controller.getPatio().getValide();
                miseAJourValidation(new ArrayList<>(), valide);
                miseAJourListeMateriel(this.controller.getListeMateriel());
                miseAJourChampsNormal(paramsMagique);
                miseAJourChampsMagique(getValeurChamps());
                miseAJourChampsNormal(paramsMagique);
                drawingPanel.updateDrawingPanels();
                majPileSauvegarde();
            } catch (Exception ignored) {
            }
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        });

        class MagiqueDTODocumentListener implements DocumentListener {

            private final JTextField jTextField;

            public MagiqueDTODocumentListener(JTextField jTextField) {
                this.jTextField = jTextField;
            }

            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                customUpdate();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                customUpdate();
            }

            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
                customUpdate();
            }

            private void customUpdate() {
                String textForm = this.jTextField.getText();

                try {
                    float magiqueForm = getFloatFromTextFieldString(textForm);

                    if (magiqueForm <= 0) {
                        throw new Exception(magiqueForm + " est inférieur à zéro");
                    }

                    this.jTextField.setBackground(Color.WHITE);
                    this.jTextField.setForeground(Color.BLACK);

                } catch (Exception error) {
                    this.jTextField.setBackground(new Color(243, 75, 109));
                    this.jTextField.setForeground(Color.WHITE);
                }
            }
        }

        hauteurMagique.getDocument().addDocumentListener(new MagiqueDTODocumentListener(hauteurMagique));
        longueurMagique.getDocument().addDocumentListener(new MagiqueDTODocumentListener(longueurMagique));
        largeurMagique.getDocument().addDocumentListener(new MagiqueDTODocumentListener(largeurMagique));
        espacementMagique.getDocument().addDocumentListener(new MagiqueDTODocumentListener(espacementMagique));

        class CustomActionListenerVisiblite implements ActionListener {
            private final TransparenceMode transparenceMode;

            public CustomActionListenerVisiblite(TransparenceMode transparenceMode) {
                this.transparenceMode = transparenceMode;
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                String nom = transparenceMode.name().toLowerCase();
                nom = nom.substring(0, 1).toUpperCase() + nom.substring(1);
                modificationLabel.setText("Modification - " + nom);
                modeTransparence = this.transparenceMode;
                slider1.setValue(couleurs.get(this.transparenceMode.getClasse()).getAlpha());
                visibleCheckBox.setEnabled(true);
                visibleCheckBox.setSelected(visibilites.get(this.transparenceMode.getClasse()));
            }
        }

        solivesVisibilite.addActionListener(new CustomActionListenerVisiblite(TransparenceMode.SOLIVES));
        poutreVisibilite.addActionListener(new CustomActionListenerVisiblite(TransparenceMode.POUTRES));
        poteauVisibilite.addActionListener(new CustomActionListenerVisiblite(TransparenceMode.POTEAUX));
        rampeVisibilite.addActionListener(new CustomActionListenerVisiblite(TransparenceMode.RAMPE));
        recouvrementVisibilite.addActionListener(new CustomActionListenerVisiblite(TransparenceMode.RECOUVREMENT));
        accessoiresVisibilite.addActionListener(new CustomActionListenerVisiblite(TransparenceMode.ACCESSOIRES));

        slider1.addChangeListener(e -> {
            Color couleur = couleurs.get(modeTransparence.getClasse());
            if (modeTransparence.getClasse() == Balustre.class) {
                couleurs.replace(Barreau.class, new Color(couleur.getRed(), couleur.getGreen(), couleur.getBlue(), slider1.getValue()));
                couleurs.replace(Traverse.class, new Color(couleur.getRed(), couleur.getGreen(), couleur.getBlue(), slider1.getValue()));
                couleurs.replace(MainCourante.class, new Color(couleur.getRed(), couleur.getGreen(), couleur.getBlue(), slider1.getValue()));
                couleurs.replace(Marche.class, new Color(couleur.getRed(), couleur.getGreen(), couleur.getBlue(), slider1.getValue()));
                couleurs.replace(Contremarche.class, new Color(couleur.getRed(), couleur.getGreen(), couleur.getBlue(), slider1.getValue()));

            }
            couleurs.replace(modeTransparence.getClasse(), new Color(couleur.getRed(), couleur.getGreen(), couleur.getBlue(), slider1.getValue()));
            drawingPanel.updateDrawingPanels();
        });

        slider1.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent focusEvent) {

            }

            @Override
            public void focusLost(FocusEvent focusEvent) {
                try {
                    majPileSauvegarde();
                } catch (Exception ignored) {
                }
            }
        });

        class CustomFocusListener implements FocusListener {

            final JTextField jTextField;
            final String nom_param;
            String focusGainedString = "";

            public CustomFocusListener(JTextField jTextField, String nom_param) {
                this.jTextField = jTextField;
                this.nom_param = nom_param;
            }

            public void update() {
                try {
                    String textForm = this.jTextField.getText();

                    Float nombreForm = getFloatFromTextFieldString(textForm);

                    boolean valide = controller.validerParametre(this.nom_param, nombreForm);

                    if (nom_param.equals("la_patio") && nombreForm < 12) {
                        valide = false;
                    } else if (nom_param.equals("lo_patio") && nombreForm < 12) {
                        valide = false;
                    } else if (nom_param.equals("nb_poutres") || nom_param.equals("nb_poteaux")) {
                        if (getIntFromTextField(textForm) != nombreForm.intValue()) {
                            valide = false;
                        }
                    } else if (nom_param.equals("lo_porteafo")) {
                        if (getFloatFromTextFieldString(textForm) + 12 >= getFloatFromTextFieldString(longueurPatio.getText())) {
                            valide = false;
                        }
                    }

                    if (textForm.endsWith("f") || textForm.endsWith("d")) {
                        valide = false;
                    }

                    if (!valide) {
                        this.jTextField.setBackground(new Color(243, 75, 109));
                        this.jTextField.setForeground(Color.WHITE);
                    } else {
                        this.jTextField.setBackground(Color.WHITE);
                        this.jTextField.setForeground(Color.BLACK);

                        valide = controller.validerDTO(getValeurChamps());
                        if (valide) {
                            try {
                                ArrayList<NormeResultat> resultats = controller.creerPatio(getValeurChamps(), popUpPrix.getPrixDTO(), getFloatFromTextFieldString(hauteurRampe.getText()), getTypeBarreaux());
                                miseAJourListeMateriel(controller.getListeMateriel());
                                boolean valide2 = controller.getPatio().getValide();
                                miseAJourValidation(resultats, valide2);
                                drawingPanel.updateDrawingPanels();
                            } catch (Exception ignored) {
                            }
                        }
                    }

                } catch (Exception error) {
                    this.jTextField.setBackground(new Color(243, 75, 109));
                    this.jTextField.setForeground(Color.WHITE);
                }

            }

            @Override
            public void focusGained(FocusEvent e) {
                focusGainedString = jTextField.getText();
                update();
            }

            @Override
            public void focusLost(FocusEvent e) {
                update();
                if (!jTextField.getText().equals(focusGainedString)) {
                    majPileSauvegarde();
                }
            }
        }

        class CustomActionListener implements ActionListener {
            final JTextField jTextField;
            final String nom_param;

            CustomActionListener(JTextField jTextField, String nom_param) {
                this.jTextField = jTextField;
                this.nom_param = nom_param;
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    CustomFocusListener customFocusListener = (CustomFocusListener) jTextField.getFocusListeners()[jTextField.getFocusListeners().length - 1];

                    String textForm = this.jTextField.getText();

                    Float nombreForm = getFloatFromTextFieldString(textForm);

                    boolean valide = controller.validerParametre(this.nom_param, nombreForm);

                    if (nom_param.equals("la_patio") && nombreForm < 12) {
                        valide = false;
                    } else if (nom_param.equals("lo_patio") && nombreForm < 12) {
                        valide = false;
                    } else if (nom_param.equals("nb_poutres") || nom_param.equals("nb_poteaux")) {
                        if (getIntFromTextField(textForm) != nombreForm.intValue()) {
                            valide = false;
                        }
                    } else if (nom_param.equals("lo_porteafo")) {
                        if (getFloatFromTextFieldString(textForm) + 12 >= getFloatFromTextFieldString(longueurPatio.getText())) {
                            valide = false;
                        }
                    }

                    if (textForm.endsWith("f") || textForm.endsWith("d")) {
                        valide = false;
                    }

                    if (!valide) {
                        this.jTextField.setBackground(new Color(243, 75, 109));
                        this.jTextField.setForeground(Color.WHITE);
                    } else {
                        this.jTextField.setBackground(Color.WHITE);
                        this.jTextField.setForeground(Color.BLACK);

                        valide = controller.validerDTO(getValeurChamps());
                        if (valide) {
                            try {
                                ArrayList<NormeResultat> resultats = controller.creerPatio(getValeurChamps(), popUpPrix.getPrixDTO(), getFloatFromTextFieldString(hauteurRampe.getText()), getTypeBarreaux());
                                miseAJourListeMateriel(controller.getListeMateriel());
                                boolean valide2 = controller.getPatio().getValide();
                                miseAJourValidation(resultats, valide2);
                                drawingPanel.updateDrawingPanels();
                            } catch (Exception ignored) {
                            }
                        }
                    }

                    if (!e.getActionCommand().equals(customFocusListener.focusGainedString)) {
                        majPileSauvegarde();
                        customFocusListener.focusGainedString = e.getActionCommand();
                    }

                } catch (Exception error) {
                    this.jTextField.setBackground(new Color(243, 75, 109));
                    this.jTextField.setForeground(Color.WHITE);
                }
            }
        }

        longueurPorteAFo.addFocusListener(new CustomFocusListener(longueurPorteAFo, "lo_porteafo"));
        espRecouvre.addFocusListener(new CustomFocusListener(espRecouvre, "esp_recouvre"));
        longueurPatio.addFocusListener(new CustomFocusListener(longueurPatio, "lo_patio"));
        largeurPatio.addFocusListener(new CustomFocusListener(largeurPatio, "la_patio"));
        espSolive.addFocusListener(new CustomFocusListener(espSolive, "esp_solive"));
        quantiteePoteaux.addFocusListener(new CustomFocusListener(quantiteePoteaux, "nb_poteaux"));
        quantitePoutre.addFocusListener(new CustomFocusListener(quantitePoutre, "nb_poutres"));
        hauteurPatio.addFocusListener(new CustomFocusListener(hauteurPatio, "lo_poteau"));
        hauteurRampe.addFocusListener(new CustomFocusListener(hauteurRampe, "ha_rampe"));

        longueurPorteAFo.addActionListener(new CustomActionListener(longueurPorteAFo, "lo_porteafo"));
        espRecouvre.addActionListener(new CustomActionListener(espRecouvre, "esp_recouvre"));
        longueurPatio.addActionListener(new CustomActionListener(longueurPatio, "lo_patio"));
        largeurPatio.addActionListener(new CustomActionListener(largeurPatio, "la_patio"));
        espSolive.addActionListener(new CustomActionListener(espSolive, "esp_solive"));
        quantiteePoteaux.addActionListener(new CustomActionListener(quantiteePoteaux, "nb_poteaux"));
        quantitePoutre.addActionListener(new CustomActionListener(quantitePoutre, "nb_poutres"));
        hauteurPatio.addActionListener(new CustomActionListener(hauteurPatio, "lo_poteau"));
        hauteurRampe.addActionListener(new CustomActionListener(hauteurRampe, "ha_rampe"));

        poteauVisibilite.setBackground(couleurs.get(Poteau.class));
        poutreVisibilite.setBackground(couleurs.get(PoutrePlanche.class));
        solivesVisibilite.setBackground(couleurs.get(Solive.class));
        recouvrementVisibilite.setBackground(couleurs.get(RecouvrementPlanche.class));
        rampeVisibilite.setBackground(couleurs.get(Balustre.class));
        accessoiresVisibilite.setBackground(couleurs.get(Accessoire.class));

        couleurButton.addActionListener(e -> {

            Color couleur = JColorChooser.showDialog(null, "Choisir une couleur", couleurs.get(modeTransparence.getClasse()));
            couleur = new Color(couleur.getRed(), couleur.getGreen(), couleur.getBlue(), couleurs.get(modeTransparence.getClasse()).getAlpha());
            couleurs.replace(modeTransparence.getClasse(), couleur);

            switch (modeTransparence) {
                case POTEAUX:
                    poteauVisibilite.setBackground(couleur);
                    break;
                case SOLIVES:
                    solivesVisibilite.setBackground(couleur);
                    break;
                case POUTRES:
                    poutreVisibilite.setBackground(couleur);
                    break;
                case RECOUVREMENT:
                    recouvrementVisibilite.setBackground(couleur);
                    break;
                case RAMPE:
                    rampeVisibilite.setBackground(couleur);
                    couleurs.replace(Barreau.class, couleur);
                    couleurs.replace(Balustre.class, couleur);
                    couleurs.replace(Traverse.class, couleur);
                    couleurs.replace(MainCourante.class, couleur);
                    couleurs.replace(Marche.class, couleur);
                    couleurs.replace(Contremarche.class, couleur.darker());
                    break;
                case ACCESSOIRES:
                    accessoiresVisibilite.setBackground(couleur);
                    break;
                default:
                    break;
            }
            drawingPanel.updateDrawingPanels();
            try {
                majPileSauvegarde();
            } catch (Exception ignore) {
            }
        });

        JPGButton.addActionListener(e -> controller.exporterJPG(drawingPanel));

        STLButton.addActionListener(e -> controller.exporterSTL());

        sauvegarderButton.addActionListener(e -> {
                    setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    controller.sauvegarder();
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
        );

        ouvrirProjetButton.addActionListener(e -> {
            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                SauvegardeDTO sauvegardeDTO = controller.chargerProjet();
                chargerSauvegardeDTO(sauvegardeDTO);
                controller.supprimerStackUndo();
                controller.supprimerStackRedo();
                undoButton.setEnabled(false);
                redoButton.setEnabled(false);
                controller.getUndo().pop();
                majPileSauvegarde();
                drawingPanel.updateDrawingPanels();
                miseAJourListeMateriel(controller.getListeMateriel());
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            } catch (Exception error) {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        nouveauProjetButton.addActionListener(e -> {
            int returnedVal = JOptionPane.showConfirmDialog(null, "Voulez-vous écraser le patio en cours?", "Nouveau projet", JOptionPane.YES_NO_OPTION);
            if (returnedVal == JOptionPane.YES_OPTION) {
                this.dispose();
            }
        });

        visibleCheckBox.addActionListener(e -> {
            if (modeTransparence.getClasse() == Balustre.class) {
                visibilites.replace(Barreau.class, visibleCheckBox.isSelected());
                visibilites.replace(Traverse.class, visibleCheckBox.isSelected());
                visibilites.replace(MainCourante.class, visibleCheckBox.isSelected());
                visibilites.replace(Marche.class, visibleCheckBox.isSelected());
                visibilites.replace(Contremarche.class, visibleCheckBox.isSelected());
            }
            visibilites.replace(modeTransparence.getClasse(), visibleCheckBox.isSelected());
            drawingPanel.updateDrawingPanels();
            try {
                majPileSauvegarde();
            } catch (Exception ignore) {
            }
        });

        class CustomActionListenerCombo implements ActionListener {

            private final JComboBox jComboBox;
            private Object lastChose;

            public CustomActionListenerCombo(JComboBox jComboBox) {
                this.jComboBox = jComboBox;
                this.lastChose = Objects.requireNonNull(jComboBox.getSelectedItem());
            }

            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (!lastChose.equals(jComboBox.getSelectedItem())) {
                    if (controller.validerDTO(getValeurChamps())) {
                        try {
                            if (!inUndo && !setType) {
                                majPileSauvegarde();
                            }
                            ArrayList<NormeResultat> resultats = controller.creerPatio(getValeurChamps(), popUpPrix.getPrixDTO(), getFloatFromTextFieldString(hauteurRampe.getText()), getTypeBarreaux());
                            boolean valide = controller.getPatio().getValide();
                            miseAJourListeMateriel(controller.getListeMateriel());
                            miseAJourValidation(resultats, valide);
                            drawingPanel.updateDrawingPanels();
                            lastChose = jComboBox.getSelectedItem();
                        } catch (Exception ignored) {
                        }
                    }
                }
            }
        }

        typeRecouvre.addActionListener(new CustomActionListenerCombo(typeRecouvre));
        typeSolive.addActionListener(new CustomActionListenerCombo(typeSolive));
        typePoutre.addActionListener(new CustomActionListenerCombo(typePoutre));
        typePoteau.addActionListener(new CustomActionListenerCombo(typePoteau));
        typeBalustrade.addActionListener(new CustomActionListenerCombo(typeBalustrade));

        ((JLabel) typePoutre.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) typeRecouvre.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) typeSolive.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) typePoteau.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);

        genererRampe.addActionListener(e -> {
            genererRampe(genererRampe.isSelected());
            try {
                majPileSauvegarde();
            } catch (Exception ignore) {
            }
        });

        class CustomCheckListeAtionListener implements ActionListener {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                HashMap<String, Boolean> listeCheckListe;
                miseAJourListeMateriel(controller.getListeMateriel());
            }
        }

        recouvreCheckListe.addActionListener(new CustomCheckListeAtionListener());
        soliveCheckListe.addActionListener(new CustomCheckListeAtionListener());
        poutreCheckListe.addActionListener(new CustomCheckListeAtionListener());
        appuiCheckListe.addActionListener(new CustomCheckListeAtionListener());
        rampeCheckListe.addActionListener(new CustomCheckListeAtionListener());

        prixButton.addActionListener(actionEvent -> popUpPrix.setVisible(true));
        CURSEURButton.addActionListener(e -> {
            accessoiresPanel.setVisible(true);
            visibilites.replace(Accessoire.class, true);
            validate();
            modeSelection = true;
            drawingPanel.changeNbFenetres(1);
            drawingPanel.setLocked(true);
            drawingPanel.updateDrawingPanels();
            popUpOptimisation.setLocked(true);
            try {
                majPileSauvegarde();
            } catch (Exception ignored) {
            }
        });

        optimisationBoutton.addActionListener(e -> popUpOptimisation.setVisible(true));
        DEPLACEMENTButton.addActionListener(e -> {
            accessoiresPanel.setVisible(false);
            validate();
            controller.setMeshSelectionne(null);
            controller.setEscalierSelectionne(false);
            modeSelection = false;
            drawingPanel.setLocked(false);
            drawingPanel.updateDrawingPanels();
            popUpOptimisation.setLocked(false);
        });

        class JOptionNomProjet {
            public JPanel panel = new JPanel(new GridLayout(0, 1));
            public JLabel label = new JLabel("Descritif du patio : (Laissez vide pour passer)");
            public JTextField nom = new JTextField();

            public JOptionNomProjet() {
                this.panel.add(this.label);
                this.panel.add(this.nom);
            }

            public String getNomProjet() throws Exception {
                int res = JOptionPane.showConfirmDialog(null, panel, "Descritif du patio : (Laissez vide pour passer)", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if (res == JOptionPane.OK_OPTION) {
                    return nom.getText();
                } else {
                    throw new Exception("annuler");
                }
            }
        }
        ;

        sauvegarderButton1.addActionListener(e -> {
            JOptionNomProjet jOptionNomProjet = new JOptionNomProjet();
            String nom_projet = null;
            try {
                nom_projet = jOptionNomProjet.getNomProjet();
                controller.sauverListeMateriel(getCheckListeBools(), nom_projet);
            } catch (Exception ignored) {
            }
        });

        class CustomButtonMouseListener extends MouseAdapter {
            private final JButton jbutton;

            CustomButtonMouseListener(JButton jButton) {
                this.jbutton = jButton;
            }


            @Override
            public void mouseEntered(MouseEvent e) {
                setCursor(new Cursor(Cursor.HAND_CURSOR));
                jbutton.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                jbutton.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            }
        }
        bbqButton.addActionListener(e -> ajouterMesh(TypeAccessoire.BBQ));
        tableButton.addActionListener(e -> ajouterMesh(TypeAccessoire.TABLE));
        vaseButton.addActionListener(e -> ajouterMesh(TypeAccessoire.VASE));
        chaiseButton.addActionListener(e -> ajouterMesh(TypeAccessoire.CHAISE));
        chienButton.addActionListener(e -> ajouterMesh(TypeAccessoire.CHIEN));
        planteButton.addActionListener(e -> ajouterMesh(TypeAccessoire.PLANTE));
        maisonButton.addActionListener(e -> ajouterMesh(TypeAccessoire.MAISON));
        sapinButton.addActionListener(e -> ajouterMesh(TypeAccessoire.SAPIN));

        bbqButton.addMouseListener(new CustomButtonMouseListener(bbqButton));
        tableButton.addMouseListener(new CustomButtonMouseListener(tableButton));
        vaseButton.addMouseListener(new CustomButtonMouseListener(vaseButton));
        chaiseButton.addMouseListener(new CustomButtonMouseListener(chaiseButton));
        chienButton.addMouseListener(new CustomButtonMouseListener(chienButton));
        planteButton.addMouseListener(new CustomButtonMouseListener(planteButton));
        maisonButton.addMouseListener(new CustomButtonMouseListener(maisonButton));
        sapinButton.addMouseListener(new CustomButtonMouseListener(sapinButton));

        majPileSauvegarde();
    }

    public void ajouterMesh(TypeAccessoire typeAccessoire) {
        Mesh meshOriginal = typeAccessoire.getMesh();

        Point3D dimensionsPatio = controller.getPatio().getDimensions();
        Point3D decalage = new Point3D(dimensionsPatio.getX() / 2, dimensionsPatio.getY() / 2, dimensionsPatio.getZ() + meshOriginal.getScaling().getZ() * meshOriginal.getDimensions().getZ());

        meshOriginal.setRotation(new Point3D(0, 0, 0));

        controller.addMesh(meshOriginal, decalage, meshOriginal.getScaling(), new Point3D(0, 0, 0));
        meshOriginal.setDecalage(decalage);
        controller.setMeshSelectionne(meshOriginal);
        drawingPanel.updateDrawingPanels();
    }

    public TypeBarreau getTypeBarreaux() {
        Object selectedItem = typeBalustrade.getSelectedItem();
        if ("Modele 1".equals(selectedItem)) {
            return TypeBarreau.MODELE1;
        } else if ("Modele 2".equals(selectedItem)) {
            return TypeBarreau.MODELE2;
        } else if ("Modele 3".equals(selectedItem)) {
            return TypeBarreau.MODELE3;
        } else if ("Modele 4".equals(selectedItem)) {
            return TypeBarreau.MODELE4;
        } else if ("Modele 5".equals(selectedItem)) {
            return TypeBarreau.MODELE5;
        } else if ("Modele 6".equals(selectedItem)) {
            return TypeBarreau.MODELE6;
        } else if ("Modele 7".equals(selectedItem)) {
            return TypeBarreau.MODELE7;
        }
        return TypeBarreau.MODELE6;
    }

    protected void miseAJourChampsNormal(Params paramsMagique) {
        setType = true;
        espSolive.setText(getStringFractionFromFloat(paramsMagique.esp_solives));
        typeSolive.setSelectedItem(paramsMagique.typeSolives.toString());
        longueurPorteAFo.setText(getStringFractionFromFloat(paramsMagique.lo_porteafo));
        quantitePoutre.setText(getStringFractionFromFloat(paramsMagique.nb_poutres));
        quantiteePoteaux.setText(getStringFractionFromFloat(paramsMagique.nb_poteaux));
        largeurPatio.setText(getStringFractionFromFloat(paramsMagique.la_patio));
        longueurPatio.setText(getStringFractionFromFloat(paramsMagique.lo_patio));
        hauteurPatio.setText(getStringFractionFromFloat(paramsMagique.ha_patio));
        if (paramsMagique.typePoutre == null) {
            typePoutre.setSelectedItem("auto");
        } else {
            typePoutre.setSelectedItem(paramsMagique.typePoutre.toString());
        }
        typePoteau.setSelectedItem(paramsMagique.typePoteau.toString());
        typeRecouvre.setSelectedItem(paramsMagique.typeRecouvre.toString());
        espRecouvre.setText(getStringFractionFromFloat(paramsMagique.esp_recouvre));
        setType = false;
    }

    protected HashMap<String, Boolean> getCheckListeBools() {
        HashMap<String, Boolean> listeReturn = new HashMap<>();
        listeReturn.put("Recouvrement", recouvreCheckListe.isSelected());
        listeReturn.put("Solives", soliveCheckListe.isSelected());
        listeReturn.put("Poutres", poutreCheckListe.isSelected());
        listeReturn.put("Appuis", appuiCheckListe.isSelected());
        listeReturn.put("Garde-Corps", rampeCheckListe.isSelected());
        return listeReturn;
    }

    private MagiqueDTO getMagiqueDTO() throws Exception {
        MagiqueDTO magiqueDTO = new MagiqueDTO();
        boolean valide = true;

        try {
            magiqueDTO.ha_patio = getFloatFromTextFieldString(hauteurMagique.getText());
            hauteurMagique.setBackground(Color.WHITE);
            hauteurMagique.setForeground(Color.BLACK);
        } catch (Exception error) {
            valide = false;
            hauteurMagique.setBackground(new Color(243, 75, 109));
            hauteurMagique.setForeground(Color.WHITE);
        }

        try {
            magiqueDTO.la_patio = getFloatFromTextFieldString(largeurMagique.getText());
            largeurMagique.setBackground(Color.WHITE);
            largeurMagique.setForeground(Color.BLACK);
        } catch (Exception error) {
            valide = false;
            largeurMagique.setBackground(new Color(243, 75, 109));
            largeurMagique.setForeground(Color.WHITE);
        }

        try {
            magiqueDTO.lo_patio = getFloatFromTextFieldString(longueurMagique.getText());
            longueurMagique.setBackground(Color.WHITE);
            longueurMagique.setForeground(Color.BLACK);
        } catch (Exception error) {
            valide = false;
            longueurMagique.setBackground(new Color(243, 75, 109));
            longueurMagique.setForeground(Color.WHITE);
        }

        try {
            magiqueDTO.esp_recouvre = getFloatFromTextFieldString(espacementMagique.getText());
            espacementMagique.setBackground(Color.WHITE);
            espacementMagique.setForeground(Color.BLACK);
        } catch (Exception error) {
            valide = false;
            espacementMagique.setBackground(new Color(243, 75, 109));
            espacementMagique.setForeground(Color.WHITE);
        }

        try {
            magiqueDTO.ha_rampe = getFloatFromTextFieldString(hauteurRampe.getText());
            hauteurRampe.setBackground(Color.WHITE);
            hauteurRampe.setForeground(Color.BLACK);
        } catch (Exception error) {
            valide = false;
            hauteurRampe.setBackground(new Color(243, 75, 109));
            hauteurRampe.setForeground(Color.WHITE);
        }
        String dimensionTypeRecouvre = Objects.requireNonNull(epaisseurMagique.getSelectedItem()).toString();
        magiqueDTO.typeRecouvre = new TypeBois(dimensionTypeRecouvre);

        if (valide) {
            return magiqueDTO;
        } else {
            throw new Exception("MagiqueDTO Incorrecte!");
        }


    }

    public Controller getController() {
        return controller;
    }

    private JPanel fenetrePrincipale;
    private JToolBar toolBar;
    private JTextField quantitePoutre;
    private JPanel patioPanel;
    private JPanel bottomBarPanel;
    private JButton nouveauProjetButton;
    private JButton sauvegarderButton;
    private JButton creerButton;
    private JPanel visuelPanel;
    private JToggleButton poteauVisibilite;
    private JToggleButton solivesVisibilite;
    private JToggleButton recouvrementVisibilite;
    private JToggleButton poutreVisibilite;
    private JSlider slider1;
    private JPanel visibilitePanel;
    private JPanel sortiesPanel;
    private JPanel listePiecePanel;
    private JButton sauvegarderButton1;
    private JTextPane listeMateriel;
    private JScrollPane modeScrollPane;
    private JPanel modesPanel;
    private JPanel topBarPanel;
    private JToggleButton CURSEURButton;
    private JToggleButton DEPLACEMENTButton;
    protected JButton undoButton;
    protected JButton redoButton;
    private JButton ouvrirProjetButton;
    private JButton STLButton;
    private JButton JPGButton;
    public JTextField longueurPorteAFo;
    public JTextField espRecouvre;
    public JTextField espSolive;
    public JCheckBox visibleCheckBox;
    public JButton couleurButton;
    public JComboBox<String> typePoteau;
    public JComboBox<String> typeSolive;
    public JComboBox<String> typePoutre;
    public JComboBox<String> typeRecouvre;
    public JToggleButton rampeVisibilite;
    public JToggleButton accessoiresVisibilite;
    public JLabel prixTotal;
    public JTabbedPane modesTabsPanel;
    public JPanel modeNormal;
    public JPanel solivePanel;
    public JPanel soliveSousPanel;
    public JPanel poteauxPanel;
    public JPanel poutrePanel;
    public JPanel poutreMainPanel;
    public JPanel quantiteePoutrePanel;
    public JLabel quantiteePoutreLabel;
    public JPanel recouvrementPanel;
    public JPanel modeMagique;
    public JPanel dimensionPanel;
    public JPanel hauteurMagiquePanel;
    public JTextField hauteurMagique;
    public JPanel longueurMagiquePanel;
    public JTextField longueurMagique;
    public JPanel largeurMagiquePanel;
    public JTextField largeurMagique;
    public JPanel recouvrementMagiquePanel;
    public JPanel epaisseurMagiquePanel;
    public JComboBox<String> epaisseurMagique;
    public JPanel espacementMagiquePanel;
    public JTextField espacementMagique;
    public JTextField hauteurRampe;
    public JTextArea validationTextArea;
    public JLabel valideLabel;
    public JComboBox<String> typeBalustrade;
    public JTextField largeurPatio;
    public JTextField longueurPatio;
    public JTextField quantiteePoteaux;
    public JPanel validationPanel;
    public JPanel comboBoxListe;
    public JCheckBox soliveCheckListe;
    public JCheckBox poutreCheckListe;
    public JCheckBox appuiCheckListe;
    public JCheckBox rampeCheckListe;
    public JTabbedPane tabbedPane1;
    public JCheckBox recouvreCheckListe;
    public JButton prixButton;
    public JTextField hauteurPatio;
    public JScrollPane jScrollListe;
    public JLabel modificationLabel;
    public JButton optimisationBoutton;
    public MainDrawingPanel drawingPanel;
    public JCheckBox genererRampe;
    public JPanel accessoiresPanel;
    public JPanel table;
    public JPanel vase;
    public JButton bbqButton;
    public JButton tableButton;
    public JButton vaseButton;
    public JButton chaiseButton;
    public JButton chienButton;
    public JButton planteButton;
    public JButton maisonButton;
    public JButton sapinButton;

    public AffichageDTO genererAffichageDTO() {
        AffichageDTO affichageDTO = new AffichageDTO();
        affichageDTO.visibilites = (HashMap<Class<?>, Boolean>) this.visibilites.clone();
        affichageDTO.couleurs = (HashMap<Class<?>, Color>) this.couleurs.clone();
        return affichageDTO;
    }

    public void miseAJourListeMateriel(ListeMateriel listeMateriel2) {
        listeMateriel.setFont(new Font("Courier New", Font.PLAIN, 12));
        listeMateriel.setText(controller.getListeMateriel().toString(getCheckListeBools(), 51));
        prixTotal.setText(String.format("%.2f$", listeMateriel2.getPrixTotalString(getCheckListeBools())));
    }

    public void miseAJourValidation(ArrayList<NormeResultat> normes, boolean valide) {
        validationTextArea.setText(null);
        validationTextArea.setForeground(new Color(243, 75, 109));

        for (NormeResultat norme : normes) {
            if (norme.isRespecte()) {
                continue;
            }
            validationTextArea.append(norme.getMessage() + "\n");
            validationTextArea.append("\t-" + norme.getCorrection() + "\n");
        }
        if (valide) {
            valideLabel.setText("Valide!");
            valideLabel.setBackground(new Color(80, 238, 116));
        } else {
            valideLabel.setText("Invalide!");
            valideLabel.setBackground(new Color(243, 75, 109));
        }
    }

    public Float getFloatFromTextFieldString(String textField) {
        Pattern pattern = Pattern.compile("^([0-9]+-)?([0-9]+)?? ?([0-9]+/[0-9]+)?$");
        Matcher matcher = pattern.matcher(textField);

        if (matcher.matches()) {
            float rePieds;
            float rePouce;
            float reFrac;

            if (matcher.group(1) != null) {
                String reTiret = matcher.group(1);
                String tiretRemoved = reTiret.substring(0, reTiret.length() - 1);
                rePieds = Float.parseFloat(tiretRemoved);
            } else {
                rePieds = 0f;
            }

            if (matcher.group(2) != null) {
                rePouce = Float.parseFloat(matcher.group(2));
            } else {
                rePouce = 0f;
            }

            if (matcher.group(3) != null) {
                String[] fracSplit = matcher.group(3).split("/");
                reFrac = Float.parseFloat(fracSplit[0]) / Float.parseFloat(fracSplit[1]);
            } else {
                reFrac = 0f;
            }

            return (rePieds * 12) + rePouce + reFrac;
        } else {
            return Float.parseFloat(textField);
        }
    }

    public Integer getIntFromTextField(String textField) throws Exception {
        float nombreForm = getFloatFromTextFieldString(textField);

        if (nombreForm != (int) nombreForm) {
            throw new Exception(nombreForm + " is not an int");
        }

        return (int) nombreForm;
    }

    public void setCouleurRecouvrement(Color color) {
        couleurRecouvrementAvant = couleurs.get(RecouvrementPlanche.class);
        couleurs.replace(RecouvrementPlanche.class, color);
        drawingPanel.updateDrawingPanels();
    }

    public void resetCouleurRecouvrement() {
        couleurs.replace(RecouvrementPlanche.class, couleurRecouvrementAvant);
        drawingPanel.updateDrawingPanels();
    }

    protected void majPileSauvegarde() {
        try {
            SauvegardeDTO sauvegardeDTO = new SauvegardeDTO(modeTransparence, genererAffichageDTO(), (ParametresDTO) getValeurChamps().clone(), popUpPrix.getPrixDTO(), popUpOptimisation.modeNoel.isSelected(), genererRampe.isSelected(), Objects.requireNonNull(typeBalustrade.getSelectedItem()).toString(), popUpOptimisation.couleurArrierePlan, popUpOptimisation.couleurContour);
            controller.empilerStackUndo(sauvegardeDTO);
            controller.supprimerStackRedo();
        } catch (Exception ignored) {
        }

        undoButton.setEnabled(controller.getUndo().size() != 1);
        redoButton.setEnabled(!controller.getRedo().empty());
    }

    public void chargerSauvegardeDTO(SauvegardeDTO sauvegardeDTO) throws CloneNotSupportedException {
        setValeurChamps((ParametresDTO) sauvegardeDTO.parametresDTO.clone());
        popUpPrix.setPrixDTO(sauvegardeDTO.prixDTO);
        couleurs = (HashMap<Class<?>, Color>) sauvegardeDTO.couleurs.clone();
        chargerCouleursBouton();
        popUpOptimisation.modeNoel.setSelected(sauvegardeDTO.modeNoel);
        drawingPanel.setModeNoel(sauvegardeDTO.modeNoel);
        setType = true;
        typeBalustrade.setSelectedItem(sauvegardeDTO.typeBalustrade);
        setType = false;
        popUpOptimisation.couleurArrierePlan = sauvegardeDTO.background;
        popUpOptimisation.couleurArrierePlanPanel.setBackground(sauvegardeDTO.background);
        drawingPanel.setCouleurArrierePlan(sauvegardeDTO.background);
        popUpOptimisation.couleurContour = sauvegardeDTO.outline;
        popUpOptimisation.couleurLigneContourPanel.setBackground(sauvegardeDTO.outline);
        drawingPanel.setCouleurContour(sauvegardeDTO.outline);
        visibilites = (HashMap<Class<?>, Boolean>) sauvegardeDTO.visibilites.clone();
        genererRampe(sauvegardeDTO.genererRampe);
        controller.updateHauteurMeshes();
        drawingPanel.updateDrawingPanels();
        miseAJourListeMateriel(controller.getListeMateriel());
        this.modeTransparence = sauvegardeDTO.modeTransparence;
        chargerModification();
    }

    private void chargerModification() {
        rampeVisibilite.setSelected(false);
        switch (modeTransparence) {
            case RECOUVREMENT:
                recouvrementVisibilite.setSelected(true);
                break;
            case POTEAUX:
                poteauVisibilite.setSelected(true);
                break;
            case POUTRES:
                poutreVisibilite.setSelected(true);
                break;
            case SOLIVES:
                solivesVisibilite.setSelected(true);
                break;
            case ACCESSOIRES:
                accessoiresVisibilite.setSelected(true);
                break;
            case RAMPE:
                rampeVisibilite.setSelected(true);
                break;
        }
        String nom = this.modeTransparence.name().toLowerCase();
        nom = nom.substring(0, 1).toUpperCase() + nom.substring(1);
        modificationLabel.setText("Modification - " + nom);
        visibleCheckBox.setSelected(visibilites.get(modeTransparence.getClasse()));
        slider1.setValue(couleurs.get(modeTransparence.getClasse()).getAlpha());
    }

    private void chargerCouleursBouton() {
        poteauVisibilite.setBackground(couleurs.get(TransparenceMode.POTEAUX.getClasse()));
        solivesVisibilite.setBackground(couleurs.get(TransparenceMode.SOLIVES.getClasse()));
        recouvrementVisibilite.setBackground(couleurs.get(TransparenceMode.RECOUVREMENT.getClasse()));
        poutreVisibilite.setBackground(couleurs.get(TransparenceMode.POUTRES.getClasse()));
        rampeVisibilite.setBackground(couleurs.get(TransparenceMode.RAMPE.getClasse()));
        accessoiresVisibilite.setBackground(couleurs.get(TransparenceMode.ACCESSOIRES.getClasse()));
    }

    private void genererRampe(boolean selected) {

        // liste materiel
        genererRampe.setSelected(selected);
        rampeCheckListe.setSelected(selected);
        rampeCheckListe.setEnabled(selected);
        // visibilite
        rampeVisibilite.setSelected(true);
        modificationLabel.setText("Modification - Rampe");
        modeTransparence = TransparenceMode.RAMPE;
        rampeVisibilite.setEnabled(selected);
        visibilites.replace(TransparenceMode.RAMPE.getClasse(), selected);
        visibilites.replace(Barreau.class, selected);
        visibilites.replace(Traverse.class, selected);
        visibilites.replace(MainCourante.class, selected);
        visibilites.replace(Marche.class, selected);
        visibilites.replace(Contremarche.class, selected);
        visibleCheckBox.setSelected(selected);
        visibleCheckBox.setEnabled(selected);
        // repaint
        setValeurChamps(getValeurChamps());
        miseAJourListeMateriel(controller.getListeMateriel());
        drawingPanel.updateDrawingPanels();
    }

    private String getStringFractionFromFloat(float number) {
        float decimals = number - (int) number;
        int order = (int) Math.pow(10, String.valueOf(decimals).length() - 2);
        int decimal_as_int = (int) (decimals * order);
        int gcd = Materiel.getGCD(order, decimal_as_int);
        int numerator = decimal_as_int / gcd;
        int denominator = order / gcd;

        float div_check;
        float dif_div;
        if (decimal_as_int != 0 && order != 0 && denominator != 0) {
            div_check = (float) order / (float) decimal_as_int;
            dif_div = Math.abs(Math.round(div_check) - div_check);

            if (dif_div < 0.01) {
                numerator = 1;
                denominator = Math.round(div_check);
            }

            if (denominator > 64) {
                float diff = denominator / 64f;
                denominator = 64;
                numerator = (int) (numerator / diff);

                gcd = Materiel.getGCD(numerator, denominator);
                numerator = numerator / gcd;
                denominator = denominator / gcd;
            }
        }

        String whole;
        if ((int) number == 0) {
            whole = "";
        } else {
            whole = (int) number + " ";
        }
        if (numerator != 0) {
            return whole + numerator + "/" + denominator;
        } else {
            return String.valueOf((int) number);
        }
    }
}


