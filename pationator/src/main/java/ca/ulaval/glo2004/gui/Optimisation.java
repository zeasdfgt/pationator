package ca.ulaval.glo2004.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class Optimisation extends JFrame {
    public JPanel prixPanel;
    public JPanel mainPanel;
    public JButton couleurContourBoutton;
    public JPanel couleurArrierePlanPanel;
    public JPanel couleurLigneContourPanel;
    public JButton couleurArrierePlanBoutton;
    public JCheckBox modeNoel;
    public JToggleButton nbFenetre1;
    public JToggleButton nbFenetre2;
    public JToggleButton nbFenetre4;

    public Color couleurArrierePlan = new Color(80, 83, 104);
    public Color couleurContour = Color.black;

    private boolean locked = false;

    public Optimisation(MainWindow mainWindow) {
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        this.setContentPane(mainPanel);
        this.setTitle("Ajustement des Prix");
        this.pack();

        couleurArrierePlanPanel.setBackground(couleurArrierePlan);
        couleurLigneContourPanel.setBackground(couleurContour);
        this.setFocusable(true);

        couleurArrierePlanBoutton.addActionListener(e -> {
            Color couleur = JColorChooser.showDialog(null, "Choisir une couleur", couleurArrierePlan);
            couleurArrierePlan = couleur;
            couleurArrierePlanPanel.setBackground(couleur);
            mainWindow.drawingPanel.setCouleurArrierePlan(couleurArrierePlan);
            mainWindow.majPileSauvegarde();
        });
        couleurContourBoutton.addActionListener(e -> {
            Color couleur = JColorChooser.showDialog(null, "Choisir une couleur", couleurContour);
            couleurContour = couleur;
            couleurLigneContourPanel.setBackground(couleur);
            mainWindow.drawingPanel.setCouleurContour(couleur);
            mainWindow.majPileSauvegarde();
        });
        modeNoel.addActionListener(e -> {
            mainWindow.drawingPanel.setModeNoel(modeNoel.isSelected());
            if (!modeNoel.isSelected()) {
                mainWindow.resetCouleurRecouvrement();
            } else {
                mainWindow.setCouleurRecouvrement(Color.white);
            }
            mainWindow.majPileSauvegarde();
        });
        nbFenetre1.addActionListener(e -> {
            if (nbFenetre1.isSelected() && !locked) {
                mainWindow.drawingPanel.changeNbFenetres(1);
            }
        });
        nbFenetre2.addActionListener(e -> {
            if (nbFenetre2.isSelected() && !locked) {
                mainWindow.drawingPanel.changeNbFenetres(2);
            }
        });
        nbFenetre4.addActionListener(e -> {
            if (nbFenetre4.isSelected() && !locked) {
                mainWindow.drawingPanel.changeNbFenetres(4);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setBackground(new Color(-15259597));
        mainPanel.setPreferredSize(new Dimension(400, 400));
        prixPanel = new JPanel();
        prixPanel.setLayout(new BorderLayout(0, 0));
        prixPanel.setMinimumSize(new Dimension(-1, -1));
        prixPanel.setOpaque(false);
        prixPanel.setPreferredSize(new Dimension(360, 240));
        mainPanel.add(prixPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        prixPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-8856597)), "Paramètres avancés", TitledBorder.CENTER, TitledBorder.TOP, this.$$$getFont$$$(null, -1, 16, prixPanel.getFont()), new Color(-8856597)));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 1, new Insets(20, 20, 20, 20), -1, 20));
        panel1.setOpaque(false);
        prixPanel.add(panel1, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        panel2.setOpaque(false);
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-1));
        label1.setText("Nombre de fenêtres : ");
        panel2.add(label1, BorderLayout.WEST);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel3.setOpaque(false);
        panel2.add(panel3, BorderLayout.CENTER);
        nbFenetre1 = new JToggleButton();
        nbFenetre1.setText("1");
        panel3.add(nbFenetre1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nbFenetre2 = new JToggleButton();
        nbFenetre2.setText("2");
        panel3.add(nbFenetre2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nbFenetre4 = new JToggleButton();
        nbFenetre4.setSelected(true);
        nbFenetre4.setText("4");
        panel3.add(nbFenetre4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new BorderLayout(10, 0));
        panel4.setOpaque(false);
        panel1.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setForeground(new Color(-1));
        label2.setPreferredSize(new Dimension(200, 16));
        label2.setText("<html>Changer la couleur de la <br> ligne de contour");
        panel4.add(label2, BorderLayout.WEST);
        couleurLigneContourPanel = new JPanel();
        couleurLigneContourPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        couleurLigneContourPanel.setBackground(new Color(-11051674));
        panel4.add(couleurLigneContourPanel, BorderLayout.CENTER);
        couleurLigneContourPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-1)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        couleurContourBoutton = new JButton();
        couleurContourBoutton.setText("Modifier");
        panel4.add(couleurContourBoutton, BorderLayout.EAST);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new BorderLayout(10, 0));
        panel5.setOpaque(false);
        panel1.add(panel5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setForeground(new Color(-1));
        label3.setPreferredSize(new Dimension(200, 16));
        label3.setText("<html>Changer la couleur de <br>l'arrière-plan");
        panel5.add(label3, BorderLayout.WEST);
        couleurArrierePlanPanel = new JPanel();
        couleurArrierePlanPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        couleurArrierePlanPanel.setBackground(new Color(-11051674));
        panel5.add(couleurArrierePlanPanel, BorderLayout.CENTER);
        couleurArrierePlanPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-1)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        couleurArrierePlanBoutton = new JButton();
        couleurArrierePlanBoutton.setText("Modifier");
        panel5.add(couleurArrierePlanBoutton, BorderLayout.EAST);
        modeNoel = new JCheckBox();
        modeNoel.setForeground(new Color(-1));
        modeNoel.setText("Mode Noël");
        panel1.add(modeNoel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(nbFenetre4);
        buttonGroup.add(nbFenetre4);
        buttonGroup.add(nbFenetre1);
        buttonGroup.add(nbFenetre2);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public void setLocked(boolean locked) {
        this.locked = locked;
        if (locked) {
            nbFenetre1.setSelected(true);
        }
    }
}
